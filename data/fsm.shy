system logic_application

    machine performer
        state initial
            to title
        state title
            on entry
                command start to title_performer
            to main_menu
                if { ( machine title_performer is finished ) }
        state main_menu
            on entry
                command start to main_menu_performer
            to amusement
                if { ( machine main_menu_performer is finished ) }
        state amusement
            on entry
                command start to amusement_performer
            to game
                if { ( machine amusement_performer is finished ) }
        state game
            on entry
                command start to game_performer

    machine generator
        state initial
            to text
        state text
            on entry
                command start to text_generator
            to title
                if { ( machine text_generator is finished ) }
        state title
            on entry
                command start to title_generator
            to main_menu
                if { ( machine title_generator is finished ) }
        state main_menu
            on entry
                command start to main_menu_generator
            to amusement
                if { ( machine main_menu_generator is finished ) }
        state amusement
            on entry
                command start to amusement_generator
            to game
                if { ( machine amusement_generator is finished ) }
        state game

    machine text_generator
        state initial
            to generating
                if { ( command start ) }
        state generating
            on entry
                do logic_text_prepare_permit
            on { logic_application_update }
                do logic_text_update
            to finished
                if { logic_text_prepared }
        state finished

    machine title_generator
        state initial
            to generating
                if { ( command start ) stage_title_enabled }
            to finished
                if { ( command start ) stage_title_disabled }
        state generating
            on entry
                do logic_title_launch_permit
            on { logic_application_update }
                do logic_title_update
            to finished
                if { logic_title_created }
        state finished

    machine title_performer
        state initial
            to performing
                if { ( command start ) stage_title_enabled }
            to finished
                if { ( command start ) stage_title_disabled }
        state performing
            on { logic_application_render }
                do logic_title_render
            on { logic_application_update }
                do logic_title_update
            to finished
                if { logic_title_finished }
        state finished

    machine main_menu_generator
        state initial
            to generating
                if { ( command start ) stage_main_menu_enabled }
            to finished
                if { ( command start ) stage_main_menu_disabled }
        state generating
            on entry
                do logic_main_menu_creation_permit
            on { logic_application_update }
                do logic_main_menu_update
            to finished
                if { logic_main_menu_created }
        state finished

    machine main_menu_performer
        state initial
            to performing
                if { ( command start ) stage_main_menu_enabled }
            to finished
                if { ( command start ) stage_main_menu_disabled }
        state performing
            on entry
                do logic_main_menu_launch_permit
            on { logic_application_render }
                do logic_main_menu_render
            on { logic_application_update }
                do logic_main_menu_update
            to finished
                if { logic_main_menu_finished }
        state finished

    machine amusement_generator
        state initial
            to generating
                if { ( command start ) ( command start ) stage_amusement_enabled } { ( command start ) stage_amusement_enabled }
            to finished
                if { ( command start ) stage_amusement_disabled }
        state generating
            on entry
                do logic_amusement_creation_permit
            on { logic_application_update }
                do logic_amusement_update
            to finished
                if { logic_amusement_created } { logic_amusement_created }
        state finished

    machine amusement_performer
        state initial
            to performing
                if { ( command start ) stage_amusement_enabled }
            to finished
                if { ( command start ) stage_amusement_disabled }
        state performing
            on entry
                do logic_amusement_launch_permit
            on { logic_application_render } { logic_application_render }
                do logic_amusement_render
                do logic_amusement_render
            on { logic_application_update }
                do logic_amusement_update
            to finished
                if { logic_amusement_finished }
        state finished

    machine game_performer
        state initial
            to performing
                if { ( command start ) }
        state performing
            on entry
                do logic_game_launch_permit
            on { logic_application_render }
                do logic_game_render
            on { logic_application_update }
                do logic_game_update

