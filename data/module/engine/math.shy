stateless engine_math
    copy
        proc catmull_rom_spline_what
            args result t p0 p1 p2 p3
            vars t2 t3 t2_mul_2 t2_mul_4 t2_mul_5 t3_mul_3
                 p0_coeff p1_coeff p2_coeff p3_coeff
                 p0_scaled p1_scaled p2_scaled p3_scaled
                 result_p0_p1 result_p2_p3 result_p0_p1_p2_p3
            ops
                platform_math_mul_fracts
                    t2 t t
                    t3 t2 t
                    t2_mul_2 t2 2
                    t2_mul_4 t2 4
                    t2_mul_5 t2 5
                    t3_mul_3 t3 3
                platform_math_sub_fracts p0_coeff t2_mul_2 t
                platform_math_sub_from_fract p0_coeff t3
                platform_math_sub_fracts p1_coeff t3_mul_3 t2_mul_5
                platform_math_add_to_fract p1_coeff fract_2
                platform_math_sub_fracts p2_coeff t2_mul_4 t3_mul_3
                platform_math_add_to_fract p2_coeff t
                platform_math_sub_fracts p3_coeff t3 t2
                how_to_mul
                    p0_scaled p0 p0_coeff
                    p1_scaled p1 p1_coeff
                    p2_scaled p2 p2_coeff
                    p3_scaled p3 p3_coeff
                how_to_add
                    result_p0_p1 p0_scaled p1_scaled
                    result_p2_p3 p2_scaled p3_scaled
                    result_p0_p1_p2_p3 result_p0_p1 result_p2_p3
                how_to_mul result result_p0_p1_p2_p3 1 / 2
    paste
        replace what with vector
        replace how_to_mul with platform_vector_mul
        replace how_to_add with platform_vector_add
    paste
        replace what with fracts
        replace how_to_mul with platform_math_mul_fracts
        replace how_to_add with platform_math_add_fracts

    proc lerp
        args result_value weight from_value from_weight to_value to_weight 
        vars value_diff weight_diff current_diff
        ops
            if platform_conditions_fract_less_than_fract weight from_weight
                result_value <- from_value
            elif platform_conditions_fract_less_than_fract weight to_weight
                platform_math_sub_fracts
                    value_diff to_value from_value
                    weight_diff to_weight from_weight
                    current_diff weight from_weight
                platform_math_mul_fracts result_value value_diff current_diff
                platform_math_div_fract_by result_value weight_diff
                platform_math_add_to_fract result_value from_value
            else
                result_value <- to_value

    proc hard_in_easy_out 
        args result_value weight from_value from_weight to_value to_weight 
        vars p0 p1 p2 p3 delta_value t
        ops
            if platform_conditions_fract_less_than_fract weight from_weight
                result_value <- from_value
            elif platform_conditions_fract_less_than_fract weight to_weight
                platform_math_sub_fracts delta_value from_value to_value
                lerp t weight 0 from_weight 1 to_weight
                platform_math_add_fracts p0 from_value delta_value
                p1 <- from_value
                p2 <- to_value
                p3 <- p1
                catmull_rom_spline_fracts result_value t p0 p1 p2 p3
            else
                result_value <- to_value
