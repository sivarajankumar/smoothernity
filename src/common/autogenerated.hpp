// autogenerated file begin

template < typename mediator >
shy_logic_amusement_stateless < mediator >
:: logic_amusement_stateless_consts_type 
:: logic_amusement_stateless_consts_type ( )
{
    platform_math :: make_num_fract ( renderer_clear_color_b , 1 , 3 ) ;
    platform_math :: make_num_fract ( renderer_clear_color_g , 0 , 1 ) ;
    platform_math :: make_num_fract ( renderer_clear_color_r , 0 , 1 ) ;
}

template < typename mediator >
shy_logic_application_stateless < mediator >
:: logic_application_stateless_consts_type 
:: logic_application_stateless_consts_type ( )
{
    platform_math :: make_num_whole ( skip_amusement , 0 ) ;
    platform_math :: make_num_whole ( skip_main_menu , 0 ) ;
    platform_math :: make_num_whole ( skip_title , 0 ) ;
}

template < typename mediator >
shy_logic_blanket_animation_stateless < mediator >
:: logic_blanket_animation_stateless_consts_type 
:: logic_blanket_animation_stateless_consts_type ( )
{
    platform_math :: make_num_fract ( animation_origin_x , 0 , 1 ) ;
    platform_math :: make_num_fract ( animation_origin_y , 0 , 1 ) ;
    platform_math :: make_num_fract ( animation_origin_z , - 3 , 1 ) ;
    platform_math :: make_num_fract ( appear_rotation_begin , 0 , 1 ) ;
    platform_math :: make_num_fract ( appear_rotation_end , 10 , 1 ) ;
    platform_math :: make_num_fract ( appear_scale_begin , 0 , 1 ) ;
    platform_math :: make_num_fract ( appear_scale_end , 1 , 1 ) ;
    platform_math :: make_num_fract ( appear_time_from_begin_to_end , 1 , 1 ) ;
    platform_math :: make_num_fract ( disappear_rotation_begin , 0 , 1 ) ;
    platform_math :: make_num_fract ( disappear_rotation_end , 10 , 1 ) ;
    platform_math :: make_num_fract ( disappear_scale_begin , 1 , 1 ) ;
    platform_math :: make_num_fract ( disappear_scale_end , 0 , 1 ) ;
    platform_math :: make_num_fract ( disappear_time_from_begin_to_end , 1 , 1 ) ;
}

template < typename mediator >
shy_logic_blanket_stateless < mediator >
:: logic_blanket_stateless_consts_type 
:: logic_blanket_stateless_consts_type ( )
{
    platform_math :: make_num_fract ( mesh_color_a , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_b , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_g , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_r , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_vertex_x_left , - 1 , 2 ) ;
    platform_math :: make_num_fract ( mesh_vertex_x_right , 1 , 2 ) ;
    platform_math :: make_num_fract ( mesh_vertex_y_bottom , - 1 , 2 ) ;
    platform_math :: make_num_fract ( mesh_vertex_y_top , 1 , 2 ) ;
    platform_math :: make_num_fract ( mesh_vertex_z , 0 , 1 ) ;
}

template < typename mediator >
shy_logic_door_animation_stateless < mediator >
:: logic_door_animation_stateless_consts_type 
:: logic_door_animation_stateless_consts_type ( )
{
    platform_math :: make_num_fract ( animation_origin_x , 0 , 1 ) ;
    platform_math :: make_num_fract ( animation_origin_y , 0 , 1 ) ;
    platform_math :: make_num_fract ( animation_origin_z , - 3 , 1 ) ;
    platform_math :: make_num_fract ( appear_scale_begin , 0 , 1 ) ;
    platform_math :: make_num_fract ( appear_scale_end , 1 , 1 ) ;
    platform_math :: make_num_fract ( appear_time_from_begin_to_end , 2 , 1 ) ;
}

template < typename mediator >
shy_logic_door_stateless < mediator >
:: logic_door_stateless_consts_type 
:: logic_door_stateless_consts_type ( )
{
    platform_math :: make_num_whole ( texture_stripes , 9 ) ;
    platform_math :: make_num_fract ( mesh_color_a , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_b , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_g , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_r , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_u_bottom_left , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_u_bottom_right , 1 , 2 ) ;
    platform_math :: make_num_fract ( mesh_u_top_left , 1 , 2 ) ;
    platform_math :: make_num_fract ( mesh_u_top_right , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_v_bottom_left , 1 , 2 ) ;
    platform_math :: make_num_fract ( mesh_v_bottom_right , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_v_top_left , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_v_top_right , 1 , 2 ) ;
    platform_math :: make_num_fract ( mesh_x_left , - 1 , 2 ) ;
    platform_math :: make_num_fract ( mesh_x_right , 1 , 2 ) ;
    platform_math :: make_num_fract ( mesh_y_bottom , - 1 , 2 ) ;
    platform_math :: make_num_fract ( mesh_y_top , 1 , 2 ) ;
    platform_math :: make_num_fract ( mesh_z , 0 , 1 ) ;
    platform_math :: make_num_fract ( texture_paper_a , 1 , 1 ) ;
    platform_math :: make_num_fract ( texture_paper_b , 0 , 1 ) ;
    platform_math :: make_num_fract ( texture_paper_g , 0 , 1 ) ;
    platform_math :: make_num_fract ( texture_paper_r , 0 , 1 ) ;
    platform_math :: make_num_fract ( texture_pen_a , 1 , 1 ) ;
    platform_math :: make_num_fract ( texture_pen_b , 0 , 1 ) ;
    platform_math :: make_num_fract ( texture_pen_g , 1 , 1 ) ;
    platform_math :: make_num_fract ( texture_pen_r , 1 , 1 ) ;
}

template < typename mediator >
shy_logic_fidget_stateless < mediator >
:: logic_fidget_stateless_consts_type 
:: logic_fidget_stateless_consts_type ( )
{
    platform_math :: make_num_whole ( fidget_edges , 3 ) ;
    platform_math :: make_num_whole ( scale_in_frames , 60 ) ;
    platform_math :: make_num_whole ( should_render_fidget , 0 ) ;
    platform_math :: make_num_fract ( angle_delta , 125 , 1000 ) ;
    platform_math :: make_num_fract ( fidget_b , 0 , 1 ) ;
    platform_math :: make_num_fract ( fidget_g , 1 , 2 ) ;
    platform_math :: make_num_fract ( fidget_r , 1 , 1 ) ;
    platform_math :: make_num_fract ( fidget_size , 3 , 10 ) ;
    platform_math :: make_num_fract ( mesh_x , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_y_from_top , 1 , 2 ) ;
    platform_math :: make_num_fract ( mesh_z , - 3 , 1 ) ;
}

template < typename mediator >
shy_logic_main_menu_animation_stateless < mediator >
:: logic_main_menu_animation_stateless_consts_type 
:: logic_main_menu_animation_stateless_consts_type ( )
{
    platform_math :: make_num_fract ( shake_shift_x_amplitude_begin , 20 , 1000 ) ;
    platform_math :: make_num_fract ( shake_shift_x_amplitude_end , 5 , 1000 ) ;
    platform_math :: make_num_fract ( shake_shift_x_period_in_seconds , 2 , 10 ) ;
    platform_math :: make_num_fract ( shake_time_from_begin_to_end , 6 , 10 ) ;
    platform_math :: make_num_fract ( shake_time_to_begin , 0 , 10 ) ;
}

template < typename mediator >
shy_logic_main_menu_letters_animation_stateless < mediator >
:: logic_main_menu_letters_animation_stateless_consts_type 
:: logic_main_menu_letters_animation_stateless_consts_type ( )
{
    platform_math :: make_num_fract ( appear_delay_per_col_in_seconds , 2 , 100 ) ;
    platform_math :: make_num_fract ( appear_delay_per_row_in_seconds , 5 , 100 ) ;
    platform_math :: make_num_fract ( appear_scale_begin , 0 , 1 ) ;
    platform_math :: make_num_fract ( appear_scale_end , 1 , 1 ) ;
    platform_math :: make_num_fract ( appear_scale_middle , 3 , 2 ) ;
    platform_math :: make_num_fract ( appear_time_from_begin_to_middle_in_seconds , 1 , 10 ) ;
    platform_math :: make_num_fract ( appear_time_from_middle_to_end_in_seconds , 7 , 10 ) ;
    platform_math :: make_num_fract ( disappear_animation_time_in_seconds , 8 , 10 ) ;
    platform_math :: make_num_fract ( disappear_delay_per_col_in_seconds , 2 , 100 ) ;
    platform_math :: make_num_fract ( disappear_delay_per_row_in_seconds , 5 , 100 ) ;
    platform_math :: make_num_fract ( disappear_scale_begin , 1 , 1 ) ;
    platform_math :: make_num_fract ( disappear_scale_end , 1 , 10 ) ;
    platform_math :: make_num_fract ( disappear_time_from_begin_to_end_in_seconds , 3 , 10 ) ;
    platform_math :: make_num_fract ( idle_horizontal_shift_amplitude , 1 , 20 ) ;
    platform_math :: make_num_fract ( idle_horizontal_shift_period_in_seconds , 2 , 1 ) ;
    platform_math :: make_num_fract ( idle_horizontal_shift_phase_per_row , 1 , 2 ) ;
    platform_math :: make_num_fract ( idle_vertical_shift_amplitude , 1 , 30 ) ;
    platform_math :: make_num_fract ( idle_vertical_shift_period_in_seconds , 1 , 1 ) ;
    platform_math :: make_num_fract ( idle_vertical_shift_phase_per_col , 1 , 3 ) ;
    platform_math :: make_num_fract ( idle_vertical_shift_phase_per_row , 1 , 5 ) ;
    platform_math :: make_num_fract ( selection_push_scale_begin , 1 , 1 ) ;
    platform_math :: make_num_fract ( selection_push_scale_end , 8 , 10 ) ;
    platform_math :: make_num_fract ( selection_push_scale_middle , 6 , 10 ) ;
    platform_math :: make_num_fract ( selection_push_time_from_begin_to_middle , 10 , 100 ) ;
    platform_math :: make_num_fract ( selection_push_time_from_middle_to_end , 20 , 100 ) ;
    platform_math :: make_num_fract ( selection_scale_max , 11 , 10 ) ;
    platform_math :: make_num_fract ( selection_scale_min , 9 , 10 ) ;
    platform_math :: make_num_fract ( selection_time_stable , 0 , 100 ) ;
    platform_math :: make_num_fract ( selection_time_transition , 30 , 100 ) ;
    platform_math :: make_num_fract ( selection_weight_time_from_begin_to_end , 30 , 100 ) ;
    platform_math :: make_num_fract ( selection_weight_time_to_begin , 10 , 100 ) ;
    platform_math :: make_num_fract ( unselection_weight_time_from_begin_to_end , 7 , 100 ) ;
    platform_math :: make_num_fract ( unselection_weight_time_to_begin , 0 , 100 ) ;
}

template < typename mediator >
shy_logic_main_menu_letters_layout_stateless < mediator >
:: logic_main_menu_letters_layout_stateless_consts_type 
:: logic_main_menu_letters_layout_stateless_consts_type ( )
{
    platform_math :: make_num_fract ( letter_size_fract_horizontal_border , 1 , 1 ) ;
    platform_math :: make_num_fract ( letter_size_fract_horizontal_spacing , 0 , 1 ) ;
    platform_math :: make_num_fract ( letter_size_fract_vertical_border , 1 , 1 ) ;
    platform_math :: make_num_fract ( letter_size_fract_vertical_spacing , 1 , 1 ) ;
    platform_math :: make_num_fract ( menu_position_z , - 3 , 1 ) ;
}

template < typename mediator >
shy_logic_main_menu_letters_meshes_stateless < mediator >
:: logic_main_menu_letters_meshes_stateless_consts_type 
:: logic_main_menu_letters_meshes_stateless_consts_type ( )
{
    platform_math :: make_num_fract ( letter_mesh_color_a , 1 , 1 ) ;
    platform_math :: make_num_fract ( letter_mesh_color_b , 0 , 1 ) ;
    platform_math :: make_num_fract ( letter_mesh_color_g , 1 , 1 ) ;
    platform_math :: make_num_fract ( letter_mesh_color_r , 0 , 1 ) ;
    platform_math :: make_num_fract ( letter_mesh_size , 1 , 1 ) ;
    platform_math :: make_num_fract ( time_between_creation , 50 , 1000 ) ;
}

template < typename mediator >
shy_logic_main_menu_selection_animation_stateless < mediator >
:: logic_main_menu_selection_animation_stateless_consts_type 
:: logic_main_menu_selection_animation_stateless_consts_type ( )
{
    platform_math :: make_num_fract ( appear_horizontal_scale_time_from_begin_to_end , 1 , 10 ) ;
    platform_math :: make_num_fract ( appear_horizontal_scale_time_to_begin , 0 , 10 ) ;
    platform_math :: make_num_fract ( appear_horizontal_scale_value_begin , 8 , 10 ) ;
    platform_math :: make_num_fract ( appear_horizontal_scale_value_end , 1 , 1 ) ;
    platform_math :: make_num_fract ( appear_total_animation_time , 5 , 10 ) ;
    platform_math :: make_num_fract ( appear_vertical_scale_time_from_begin_to_middle , 1 , 10 ) ;
    platform_math :: make_num_fract ( appear_vertical_scale_time_from_middle_to_end , 2 , 10 ) ;
    platform_math :: make_num_fract ( appear_vertical_scale_time_to_begin , 2 , 10 ) ;
    platform_math :: make_num_fract ( appear_vertical_scale_value_begin , 10 , 100 ) ;
    platform_math :: make_num_fract ( appear_vertical_scale_value_end , 1 , 1 ) ;
    platform_math :: make_num_fract ( appear_vertical_scale_value_middle , 2 , 1 ) ;
    platform_math :: make_num_fract ( disappear_horizontal_scale_time_from_begin_to_end , 1 , 10 ) ;
    platform_math :: make_num_fract ( disappear_horizontal_scale_time_to_begin , 4 , 10 ) ;
    platform_math :: make_num_fract ( disappear_horizontal_scale_value_begin , 1 , 1 ) ;
    platform_math :: make_num_fract ( disappear_horizontal_scale_value_end , 0 , 1 ) ;
    platform_math :: make_num_fract ( disappear_vertical_scale_time_from_begin_to_end , 1 , 10 ) ;
    platform_math :: make_num_fract ( disappear_vertical_scale_time_to_begin , 0 , 10 ) ;
    platform_math :: make_num_fract ( disappear_vertical_scale_value_begin , 1 , 1 ) ;
    platform_math :: make_num_fract ( disappear_vertical_scale_value_end , 10 , 100 ) ;
    platform_math :: make_num_fract ( idle_attention_horizontal_scale_max , 20 , 20 ) ;
    platform_math :: make_num_fract ( idle_attention_horizontal_scale_min , 19 , 20 ) ;
    platform_math :: make_num_fract ( idle_attention_horizontal_scale_period_in_seconds , 2 , 1 ) ;
    platform_math :: make_num_fract ( idle_attention_vertical_scale_max , 23 , 10 ) ;
    platform_math :: make_num_fract ( idle_attention_vertical_scale_min , 20 , 10 ) ;
    platform_math :: make_num_fract ( idle_attention_vertical_scale_period_in_seconds , 1 , 1 ) ;
    platform_math :: make_num_fract ( idle_position_z , - 3 , 1 ) ;
    platform_math :: make_num_fract ( push_attention_horizontal_scale_max , 200 , 200 ) ;
    platform_math :: make_num_fract ( push_attention_horizontal_scale_min , 185 , 200 ) ;
    platform_math :: make_num_fract ( push_attention_period_in_seconds , 4 , 10 ) ;
    platform_math :: make_num_fract ( push_attention_vertical_scale_max , 250 , 100 ) ;
    platform_math :: make_num_fract ( push_attention_vertical_scale_min , 200 , 100 ) ;
    platform_math :: make_num_fract ( push_horizontal_scale_begin , 1 , 1 ) ;
    platform_math :: make_num_fract ( push_horizontal_scale_end , 95 , 100 ) ;
    platform_math :: make_num_fract ( push_horizontal_scale_middle , 90 , 100 ) ;
    platform_math :: make_num_fract ( push_time_from_begin_to_middle , 10 , 100 ) ;
    platform_math :: make_num_fract ( push_time_from_middle_to_end , 20 , 100 ) ;
    platform_math :: make_num_fract ( push_vertical_scale_begin , 1 , 1 ) ;
    platform_math :: make_num_fract ( push_vertical_scale_end , 95 , 100 ) ;
    platform_math :: make_num_fract ( push_vertical_scale_middle , 70 , 100 ) ;
    platform_math :: make_num_fract ( push_weight_max , 1 , 1 ) ;
    platform_math :: make_num_fract ( push_weight_min , 0 , 1 ) ;
    platform_math :: make_num_fract ( push_weight_time_from_begin_to_end , 20 , 100 ) ;
    platform_math :: make_num_fract ( push_weight_time_to_begin , 10 , 100 ) ;
    platform_math :: make_num_fract ( select_horizontal_scale_time_from_begin_to_end , 7 , 100 ) ;
    platform_math :: make_num_fract ( select_horizontal_scale_time_to_begin , 0 , 100 ) ;
    platform_math :: make_num_fract ( select_horizontal_scale_value_begin , 8 , 10 ) ;
    platform_math :: make_num_fract ( select_horizontal_scale_value_end , 10 , 10 ) ;
    platform_math :: make_num_fract ( select_total_animation_time , 7 , 100 ) ;
    platform_math :: make_num_fract ( select_vertical_scale_time_from_begin_to_end , 7 , 100 ) ;
    platform_math :: make_num_fract ( select_vertical_scale_time_to_begin , 0 , 100 ) ;
    platform_math :: make_num_fract ( select_vertical_scale_value_begin , 5 , 10 ) ;
    platform_math :: make_num_fract ( select_vertical_scale_value_end , 10 , 10 ) ;
    platform_math :: make_num_fract ( unselect_horizontal_scale_time_from_begin_to_end , 7 , 100 ) ;
    platform_math :: make_num_fract ( unselect_horizontal_scale_time_to_begin , 0 , 100 ) ;
    platform_math :: make_num_fract ( unselect_horizontal_scale_value_begin , 10 , 10 ) ;
    platform_math :: make_num_fract ( unselect_horizontal_scale_value_end , 8 , 10 ) ;
    platform_math :: make_num_fract ( unselect_total_animation_time , 7 , 100 ) ;
    platform_math :: make_num_fract ( unselect_vertical_scale_time_from_begin_to_end , 7 , 100 ) ;
    platform_math :: make_num_fract ( unselect_vertical_scale_time_to_begin , 0 , 100 ) ;
    platform_math :: make_num_fract ( unselect_vertical_scale_value_begin , 10 , 10 ) ;
    platform_math :: make_num_fract ( unselect_vertical_scale_value_end , 5 , 10 ) ;
}

template < typename mediator >
shy_logic_main_menu_selection_stateless < mediator >
:: logic_main_menu_selection_stateless_consts_type 
:: logic_main_menu_selection_stateless_consts_type ( )
{
    platform_math :: make_num_fract ( mesh_color_a , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_b , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_g , 1 , 4 ) ;
    platform_math :: make_num_fract ( mesh_color_r , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_size , 1 , 1 ) ;
    platform_math :: make_num_fract ( selected_rect_vertical_scale , 20 , 10 ) ;
}

template < typename mediator >
shy_logic_observer_animation_stateless < mediator >
:: logic_observer_animation_stateless_consts_type 
:: logic_observer_animation_stateless_consts_type ( )
{
    platform_math :: make_num_fract ( flight_horizontal_offset_amplitude , 1 , 3 ) ;
    platform_math :: make_num_fract ( flight_horizontal_offset_period , 11 , 10 ) ;
    platform_math :: make_num_fract ( flight_target_z , - 1 , 1 ) ;
    platform_math :: make_num_fract ( flight_vertical_offset_amplitude , 1 , 3 ) ;
    platform_math :: make_num_fract ( flight_vertical_offset_period , 17 , 10 ) ;
}

template < typename mediator >
shy_logic_ortho_stateless < mediator >
:: logic_ortho_stateless_consts_type 
:: logic_ortho_stateless_consts_type ( )
{
    platform_math :: make_num_fract ( z_far , 50 , 1 ) ;
    platform_math :: make_num_fract ( z_near , 1 , 1 ) ;
}

template < typename mediator >
shy_logic_perspective_stateless < mediator >
:: logic_perspective_stateless_consts_type 
:: logic_perspective_stateless_consts_type ( )
{
    platform_math :: make_num_fract ( z_far_unscaled , 50 , 1 ) ;
}

template < typename mediator >
shy_logic_room_stateless < mediator >
:: logic_room_stateless_consts_type 
:: logic_room_stateless_consts_type ( )
{
    platform_math :: make_num_whole ( texture_grid_size , 10 ) ;
    platform_math :: make_num_fract ( mesh_bottom_side_u_left , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_bottom_side_u_right , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_bottom_side_v_bottom , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_bottom_side_v_top , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_bottom_a , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_bottom_b , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_bottom_g , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_bottom_r , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_far_a , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_far_b , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_far_g , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_far_r , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_left_a , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_left_b , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_left_g , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_left_r , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_near_a , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_near_b , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_near_g , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_near_r , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_right_a , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_right_b , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_right_g , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_right_r , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_top_a , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_top_b , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_top_g , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_color_top_r , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_far_side_u_left , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_far_side_u_right , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_far_side_v_bottom , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_far_side_v_top , 1 , 3 ) ;
    platform_math :: make_num_fract ( mesh_left_side_u_left , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_left_side_u_right , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_left_side_v_bottom , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_left_side_v_top , 1 , 3 ) ;
    platform_math :: make_num_fract ( mesh_near_side_u_left , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_near_side_u_right , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_near_side_v_bottom , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_near_side_v_top , 1 , 3 ) ;
    platform_math :: make_num_fract ( mesh_position_x , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_position_y , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_position_z , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_right_side_u_left , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_right_side_u_right , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_right_side_v_bottom , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_right_side_v_top , 1 , 3 ) ;
    platform_math :: make_num_fract ( mesh_top_side_u_left , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_top_side_u_right , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_top_side_v_bottom , 0 , 1 ) ;
    platform_math :: make_num_fract ( mesh_top_side_v_top , 1 , 1 ) ;
    platform_math :: make_num_fract ( mesh_x_left , - 10 , 1 ) ;
    platform_math :: make_num_fract ( mesh_x_right , 10 , 1 ) ;
    platform_math :: make_num_fract ( mesh_y_bottom , - 3 , 1 ) ;
    platform_math :: make_num_fract ( mesh_y_top , 3 , 1 ) ;
    platform_math :: make_num_fract ( mesh_z_far , - 10 , 1 ) ;
    platform_math :: make_num_fract ( mesh_z_near , 10 , 1 ) ;
    platform_math :: make_num_fract ( room_show_time , 10 , 1 ) ;
    platform_math :: make_num_fract ( texture_alpha , 1 , 1 ) ;
    platform_math :: make_num_fract ( texture_paper_intensity , 3 , 4 ) ;
    platform_math :: make_num_fract ( texture_pen_intensity , 1 , 1 ) ;
}

template < typename mediator >
shy_logic_title_stateless < mediator >
:: logic_title_stateless_consts_type 
:: logic_title_stateless_consts_type ( )
{
    platform_math :: make_num_whole ( appear_duration_in_frames , 250 ) ;
    platform_math :: make_num_whole ( disappear_duration_in_frames , 150 ) ;
    platform_math :: make_num_whole ( frames_between_letters , 5 ) ;
    platform_math :: make_num_fract ( appear_pos_angle_periods , 11 , 2 ) ;
    platform_math :: make_num_fract ( appear_rubber_first , 19 , 20 ) ;
    platform_math :: make_num_fract ( appear_rubber_last , 19 , 20 ) ;
    platform_math :: make_num_fract ( disappear_pos_angle_periods , 22 , 2 ) ;
    platform_math :: make_num_fract ( disappear_rubber_first , 59 , 60 ) ;
    platform_math :: make_num_fract ( disappear_rubber_last , 29 , 30 ) ;
    platform_math :: make_num_fract ( scene_scale_max , 9 , 10 ) ;
    platform_math :: make_num_fract ( scene_scale_min , 7 , 10 ) ;
    platform_math :: make_num_fract ( spin_radius_in_letters , 2 , 1 ) ;
}

template < typename logic_application_fsm >
class shy_logic_application_fsm_autogenerated
{
    class _state_environment_type ;
    class _states_type ;

    typedef typename logic_application_fsm :: mediator_type :: engine_fsm engine_fsm ;
    typedef typename logic_application_fsm :: mediator_type :: platform :: platform_conditions platform_conditions ;
    typedef typename logic_application_fsm :: mediator_type :: platform :: platform_math platform_math ;
    typedef typename logic_application_fsm :: mediator_type :: platform :: platform_math :: num_whole num_whole ;
    typedef typename logic_application_fsm :: mediator_type :: platform :: platform_pointer platform_pointer ;
    typedef typename logic_application_fsm :: actions_type actions_type ;
    typedef typename logic_application_fsm :: inputs_type inputs_type ;

    typedef typename engine_fsm :: template fsm_state_type < _state_environment_type > _state_type ;
    typedef shy_logic_application_fsm_autogenerated < logic_application_fsm > logic_application_fsm_autogenerated ;

    class _autogenerated_inputs_type
    {
    public :
        num_whole machine_amusement_generator_command_start ;
        num_whole machine_amusement_generator_state_is_finished ;
        num_whole machine_amusement_performer_command_start ;
        num_whole machine_amusement_performer_state_is_finished ;
        num_whole machine_game_performer_command_start ;
        num_whole machine_main_menu_generator_command_start ;
        num_whole machine_main_menu_generator_state_is_finished ;
        num_whole machine_main_menu_performer_command_start ;
        num_whole machine_main_menu_performer_state_is_finished ;
        num_whole machine_text_generator_command_start ;
        num_whole machine_text_generator_state_is_finished ;
        num_whole machine_title_generator_command_start ;
        num_whole machine_title_generator_state_is_finished ;
        num_whole machine_title_performer_command_start ;
        num_whole machine_title_performer_state_is_finished ;
    } ;

    class _autogenerated_actions_type
    {
    public :
        void set_fsm ( typename platform_pointer :: template pointer < logic_application_fsm_autogenerated > ) ;

        void amusement_generator_command_start ( ) ;
        void amusement_performer_command_start ( ) ;
        void game_performer_command_start ( ) ;
        void main_menu_generator_command_start ( ) ;
        void main_menu_performer_command_start ( ) ;
        void text_generator_command_start ( ) ;
        void title_generator_command_start ( ) ;
        void title_performer_command_start ( ) ;

    private :
        typename platform_pointer :: template pointer < logic_application_fsm_autogenerated > _fsm ;
    } ;

    class _state_environment_type
    {
    public :
        typename platform_pointer :: template pointer < _autogenerated_actions_type > autogenerated_actions ;
        typename platform_pointer :: template pointer < actions_type > actions ;
        typename platform_pointer :: template pointer < _states_type > states ;
        typename platform_pointer :: template pointer < _autogenerated_inputs_type > autogenerated_inputs ;
        typename platform_pointer :: template pointer < inputs_type > inputs ;
    } ;

    class _machine_amusement_generator_state_finished_type
    : public _state_type
    {
    public :
    } ;

    class _machine_amusement_generator_state_generating_type
    : public _state_type
    {
    public :
        virtual void on_entry ( _state_environment_type & ) ;
        virtual void on_input ( _state_environment_type & ) ;
        virtual _state_type & transition ( _state_environment_type & ) ;
    } ;

    class _machine_amusement_generator_state_initial_type
    : public _state_type
    {
    public :
        virtual _state_type & transition ( _state_environment_type & ) ;
    } ;

    class _machine_amusement_performer_state_finished_type
    : public _state_type
    {
    public :
    } ;

    class _machine_amusement_performer_state_initial_type
    : public _state_type
    {
    public :
        virtual _state_type & transition ( _state_environment_type & ) ;
    } ;

    class _machine_amusement_performer_state_performing_type
    : public _state_type
    {
    public :
        virtual void on_entry ( _state_environment_type & ) ;
        virtual void on_input ( _state_environment_type & ) ;
        virtual _state_type & transition ( _state_environment_type & ) ;
    } ;

    class _machine_game_performer_state_initial_type
    : public _state_type
    {
    public :
        virtual _state_type & transition ( _state_environment_type & ) ;
    } ;

    class _machine_game_performer_state_performing_type
    : public _state_type
    {
    public :
        virtual void on_entry ( _state_environment_type & ) ;
        virtual void on_input ( _state_environment_type & ) ;
    } ;

    class _machine_generator_state_amusement_type
    : public _state_type
    {
    public :
        virtual void on_entry ( _state_environment_type & ) ;
        virtual _state_type & transition ( _state_environment_type & ) ;
    } ;

    class _machine_generator_state_game_type
    : public _state_type
    {
    public :
    } ;

    class _machine_generator_state_initial_type
    : public _state_type
    {
    public :
        virtual _state_type & transition ( _state_environment_type & ) ;
    } ;

    class _machine_generator_state_main_menu_type
    : public _state_type
    {
    public :
        virtual void on_entry ( _state_environment_type & ) ;
        virtual _state_type & transition ( _state_environment_type & ) ;
    } ;

    class _machine_generator_state_text_type
    : public _state_type
    {
    public :
        virtual void on_entry ( _state_environment_type & ) ;
        virtual _state_type & transition ( _state_environment_type & ) ;
    } ;

    class _machine_generator_state_title_type
    : public _state_type
    {
    public :
        virtual void on_entry ( _state_environment_type & ) ;
        virtual _state_type & transition ( _state_environment_type & ) ;
    } ;

    class _machine_main_menu_generator_state_finished_type
    : public _state_type
    {
    public :
    } ;

    class _machine_main_menu_generator_state_generating_type
    : public _state_type
    {
    public :
        virtual void on_entry ( _state_environment_type & ) ;
        virtual void on_input ( _state_environment_type & ) ;
        virtual _state_type & transition ( _state_environment_type & ) ;
    } ;

    class _machine_main_menu_generator_state_initial_type
    : public _state_type
    {
    public :
        virtual _state_type & transition ( _state_environment_type & ) ;
    } ;

    class _machine_main_menu_performer_state_finished_type
    : public _state_type
    {
    public :
    } ;

    class _machine_main_menu_performer_state_initial_type
    : public _state_type
    {
    public :
        virtual _state_type & transition ( _state_environment_type & ) ;
    } ;

    class _machine_main_menu_performer_state_performing_type
    : public _state_type
    {
    public :
        virtual void on_entry ( _state_environment_type & ) ;
        virtual void on_input ( _state_environment_type & ) ;
        virtual _state_type & transition ( _state_environment_type & ) ;
    } ;

    class _machine_performer_state_amusement_type
    : public _state_type
    {
    public :
        virtual void on_entry ( _state_environment_type & ) ;
        virtual _state_type & transition ( _state_environment_type & ) ;
    } ;

    class _machine_performer_state_game_type
    : public _state_type
    {
    public :
        virtual void on_entry ( _state_environment_type & ) ;
    } ;

    class _machine_performer_state_initial_type
    : public _state_type
    {
    public :
        virtual _state_type & transition ( _state_environment_type & ) ;
    } ;

    class _machine_performer_state_main_menu_type
    : public _state_type
    {
    public :
        virtual void on_entry ( _state_environment_type & ) ;
        virtual _state_type & transition ( _state_environment_type & ) ;
    } ;

    class _machine_performer_state_title_type
    : public _state_type
    {
    public :
        virtual void on_entry ( _state_environment_type & ) ;
        virtual _state_type & transition ( _state_environment_type & ) ;
    } ;

    class _machine_text_generator_state_finished_type
    : public _state_type
    {
    public :
    } ;

    class _machine_text_generator_state_generating_type
    : public _state_type
    {
    public :
        virtual void on_entry ( _state_environment_type & ) ;
        virtual void on_input ( _state_environment_type & ) ;
        virtual _state_type & transition ( _state_environment_type & ) ;
    } ;

    class _machine_text_generator_state_initial_type
    : public _state_type
    {
    public :
        virtual _state_type & transition ( _state_environment_type & ) ;
    } ;

    class _machine_title_generator_state_finished_type
    : public _state_type
    {
    public :
    } ;

    class _machine_title_generator_state_generating_type
    : public _state_type
    {
    public :
        virtual void on_entry ( _state_environment_type & ) ;
        virtual void on_input ( _state_environment_type & ) ;
        virtual _state_type & transition ( _state_environment_type & ) ;
    } ;

    class _machine_title_generator_state_initial_type
    : public _state_type
    {
    public :
        virtual _state_type & transition ( _state_environment_type & ) ;
    } ;

    class _machine_title_performer_state_finished_type
    : public _state_type
    {
    public :
    } ;

    class _machine_title_performer_state_initial_type
    : public _state_type
    {
    public :
        virtual _state_type & transition ( _state_environment_type & ) ;
    } ;

    class _machine_title_performer_state_performing_type
    : public _state_type
    {
    public :
        virtual void on_input ( _state_environment_type & ) ;
        virtual _state_type & transition ( _state_environment_type & ) ;
    } ;

    class _states_type
    {
    public :
        _machine_amusement_generator_state_finished_type amusement_generator_state_finished ;
        _machine_amusement_generator_state_generating_type amusement_generator_state_generating ;
        _machine_amusement_generator_state_initial_type amusement_generator_state_initial ;
        _machine_amusement_performer_state_finished_type amusement_performer_state_finished ;
        _machine_amusement_performer_state_initial_type amusement_performer_state_initial ;
        _machine_amusement_performer_state_performing_type amusement_performer_state_performing ;
        _machine_game_performer_state_initial_type game_performer_state_initial ;
        _machine_game_performer_state_performing_type game_performer_state_performing ;
        _machine_generator_state_amusement_type generator_state_amusement ;
        _machine_generator_state_game_type generator_state_game ;
        _machine_generator_state_initial_type generator_state_initial ;
        _machine_generator_state_main_menu_type generator_state_main_menu ;
        _machine_generator_state_text_type generator_state_text ;
        _machine_generator_state_title_type generator_state_title ;
        _machine_main_menu_generator_state_finished_type main_menu_generator_state_finished ;
        _machine_main_menu_generator_state_generating_type main_menu_generator_state_generating ;
        _machine_main_menu_generator_state_initial_type main_menu_generator_state_initial ;
        _machine_main_menu_performer_state_finished_type main_menu_performer_state_finished ;
        _machine_main_menu_performer_state_initial_type main_menu_performer_state_initial ;
        _machine_main_menu_performer_state_performing_type main_menu_performer_state_performing ;
        _machine_performer_state_amusement_type performer_state_amusement ;
        _machine_performer_state_game_type performer_state_game ;
        _machine_performer_state_initial_type performer_state_initial ;
        _machine_performer_state_main_menu_type performer_state_main_menu ;
        _machine_performer_state_title_type performer_state_title ;
        _machine_text_generator_state_finished_type text_generator_state_finished ;
        _machine_text_generator_state_generating_type text_generator_state_generating ;
        _machine_text_generator_state_initial_type text_generator_state_initial ;
        _machine_title_generator_state_finished_type title_generator_state_finished ;
        _machine_title_generator_state_generating_type title_generator_state_generating ;
        _machine_title_generator_state_initial_type title_generator_state_initial ;
        _machine_title_performer_state_finished_type title_performer_state_finished ;
        _machine_title_performer_state_initial_type title_performer_state_initial ;
        _machine_title_performer_state_performing_type title_performer_state_performing ;
    } ;

public :
    shy_logic_application_fsm_autogenerated ( ) ;
    void set_inputs ( typename platform_pointer :: template pointer < inputs_type > ) ;
    void set_actions ( typename platform_pointer :: template pointer < actions_type > ) ;
    void is_fsm_running ( num_whole & ) ;
    void run_fsm_begin ( ) ;
    void run_fsm_end ( ) ;
    void reset_autogenerated_input_events ( ) ;
    void recalc_current_autogenerated_inputs ( ) ;
    void determine_autogenerated_inputs_change ( num_whole & ) ;
    void update_fixed_autogenerated_inputs ( ) ;
    void tick_all_fsms ( ) ;
private :
    typename platform_pointer :: template pointer < _state_type > _machine_amusement_generator_state ;
    typename platform_pointer :: template pointer < _state_type > _machine_amusement_performer_state ;
    typename platform_pointer :: template pointer < _state_type > _machine_game_performer_state ;
    typename platform_pointer :: template pointer < _state_type > _machine_generator_state ;
    typename platform_pointer :: template pointer < _state_type > _machine_main_menu_generator_state ;
    typename platform_pointer :: template pointer < _state_type > _machine_main_menu_performer_state ;
    typename platform_pointer :: template pointer < _state_type > _machine_performer_state ;
    typename platform_pointer :: template pointer < _state_type > _machine_text_generator_state ;
    typename platform_pointer :: template pointer < _state_type > _machine_title_generator_state ;
    typename platform_pointer :: template pointer < _state_type > _machine_title_performer_state ;

    num_whole _fsm_running ;
    _autogenerated_actions_type _autogenerated_actions ;
    _states_type _states ;
    _state_environment_type _state_environment ;
    _autogenerated_inputs_type _current_autogenerated_inputs ;
    _autogenerated_inputs_type _fixed_autogenerated_inputs ;
} ;

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_amusement_generator_state_generating_type :: on_entry ( _state_environment_type & env )
{
    env . actions . get ( ) . logic_amusement_creation_permit ( ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_amusement_generator_state_generating_type :: on_input ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_update ) )
    {
        env . actions . get ( ) . logic_amusement_update ( ) ;
    }
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_amusement_generator_state_generating_type :: transition ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_amusement_created ) )
    {
        return env . states . get ( ) . amusement_generator_state_finished ;
    }
    else
        return _state_type :: transition ( env ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_amusement_generator_state_initial_type :: transition ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_amusement_generator_command_start ) )
    {
        return env . states . get ( ) . amusement_generator_state_generating ;
    }
    else
        return _state_type :: transition ( env ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_amusement_performer_state_initial_type :: transition ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_amusement_performer_command_start ) )
    {
        return env . states . get ( ) . amusement_performer_state_performing ;
    }
    else
        return _state_type :: transition ( env ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_amusement_performer_state_performing_type :: on_entry ( _state_environment_type & env )
{
    env . actions . get ( ) . logic_amusement_launch_permit ( ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_amusement_performer_state_performing_type :: on_input ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_render ) )
    {
        env . actions . get ( ) . logic_amusement_render ( ) ;
    }
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_update ) )
    {
        env . actions . get ( ) . logic_amusement_update ( ) ;
    }
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_amusement_performer_state_performing_type :: transition ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_amusement_finished ) )
    {
        return env . states . get ( ) . amusement_performer_state_finished ;
    }
    else
        return _state_type :: transition ( env ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_game_performer_state_initial_type :: transition ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_game_performer_command_start ) )
    {
        return env . states . get ( ) . game_performer_state_performing ;
    }
    else
        return _state_type :: transition ( env ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_game_performer_state_performing_type :: on_entry ( _state_environment_type & env )
{
    env . actions . get ( ) . logic_game_launch_permit ( ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_game_performer_state_performing_type :: on_input ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_render ) )
    {
        env . actions . get ( ) . logic_game_render ( ) ;
    }
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_update ) )
    {
        env . actions . get ( ) . logic_game_update ( ) ;
    }
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_generator_state_amusement_type :: on_entry ( _state_environment_type & env )
{
    env . autogenerated_actions . get ( ) . amusement_generator_command_start ( ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_generator_state_amusement_type :: transition ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_amusement_generator_state_is_finished ) )
    {
        return env . states . get ( ) . generator_state_game ;
    }
    else
        return _state_type :: transition ( env ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_generator_state_initial_type :: transition ( _state_environment_type & env )
{
    return env . states . get ( ) . generator_state_text ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_generator_state_main_menu_type :: on_entry ( _state_environment_type & env )
{
    env . autogenerated_actions . get ( ) . main_menu_generator_command_start ( ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_generator_state_main_menu_type :: transition ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_main_menu_generator_state_is_finished ) )
    {
        return env . states . get ( ) . generator_state_amusement ;
    }
    else
        return _state_type :: transition ( env ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_generator_state_text_type :: on_entry ( _state_environment_type & env )
{
    env . autogenerated_actions . get ( ) . text_generator_command_start ( ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_generator_state_text_type :: transition ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_text_generator_state_is_finished ) )
    {
        return env . states . get ( ) . generator_state_title ;
    }
    else
        return _state_type :: transition ( env ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_generator_state_title_type :: on_entry ( _state_environment_type & env )
{
    env . autogenerated_actions . get ( ) . title_generator_command_start ( ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_generator_state_title_type :: transition ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_title_generator_state_is_finished ) )
    {
        return env . states . get ( ) . generator_state_main_menu ;
    }
    else
        return _state_type :: transition ( env ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_main_menu_generator_state_generating_type :: on_entry ( _state_environment_type & env )
{
    env . actions . get ( ) . logic_main_menu_creation_permit ( ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_main_menu_generator_state_generating_type :: on_input ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_update ) )
    {
        env . actions . get ( ) . logic_main_menu_update ( ) ;
    }
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_main_menu_generator_state_generating_type :: transition ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_main_menu_created ) )
    {
        return env . states . get ( ) . main_menu_generator_state_finished ;
    }
    else
        return _state_type :: transition ( env ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_main_menu_generator_state_initial_type :: transition ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_main_menu_generator_command_start ) )
    {
        return env . states . get ( ) . main_menu_generator_state_generating ;
    }
    else
        return _state_type :: transition ( env ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_main_menu_performer_state_initial_type :: transition ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_main_menu_performer_command_start ) )
    {
        return env . states . get ( ) . main_menu_performer_state_performing ;
    }
    else
        return _state_type :: transition ( env ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_main_menu_performer_state_performing_type :: on_entry ( _state_environment_type & env )
{
    env . actions . get ( ) . logic_main_menu_launch_permit ( ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_main_menu_performer_state_performing_type :: on_input ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_render ) )
    {
        env . actions . get ( ) . logic_main_menu_render ( ) ;
    }
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_update ) )
    {
        env . actions . get ( ) . logic_main_menu_update ( ) ;
    }
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_main_menu_performer_state_performing_type :: transition ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_main_menu_finished ) )
    {
        return env . states . get ( ) . main_menu_performer_state_finished ;
    }
    else
        return _state_type :: transition ( env ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_performer_state_amusement_type :: on_entry ( _state_environment_type & env )
{
    env . autogenerated_actions . get ( ) . amusement_performer_command_start ( ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_performer_state_amusement_type :: transition ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_amusement_performer_state_is_finished ) )
    {
        return env . states . get ( ) . performer_state_game ;
    }
    else
        return _state_type :: transition ( env ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_performer_state_game_type :: on_entry ( _state_environment_type & env )
{
    env . autogenerated_actions . get ( ) . game_performer_command_start ( ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_performer_state_initial_type :: transition ( _state_environment_type & env )
{
    return env . states . get ( ) . performer_state_title ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_performer_state_main_menu_type :: on_entry ( _state_environment_type & env )
{
    env . autogenerated_actions . get ( ) . main_menu_performer_command_start ( ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_performer_state_main_menu_type :: transition ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_main_menu_performer_state_is_finished ) )
    {
        return env . states . get ( ) . performer_state_amusement ;
    }
    else
        return _state_type :: transition ( env ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_performer_state_title_type :: on_entry ( _state_environment_type & env )
{
    env . autogenerated_actions . get ( ) . title_performer_command_start ( ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_performer_state_title_type :: transition ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_title_performer_state_is_finished ) )
    {
        return env . states . get ( ) . performer_state_main_menu ;
    }
    else
        return _state_type :: transition ( env ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_text_generator_state_generating_type :: on_entry ( _state_environment_type & env )
{
    env . actions . get ( ) . logic_text_prepare_permit ( ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_text_generator_state_generating_type :: on_input ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_update ) )
    {
        env . actions . get ( ) . logic_text_update ( ) ;
    }
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_text_generator_state_generating_type :: transition ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_text_prepared ) )
    {
        return env . states . get ( ) . text_generator_state_finished ;
    }
    else
        return _state_type :: transition ( env ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_text_generator_state_initial_type :: transition ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_text_generator_command_start ) )
    {
        return env . states . get ( ) . text_generator_state_generating ;
    }
    else
        return _state_type :: transition ( env ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_title_generator_state_generating_type :: on_entry ( _state_environment_type & env )
{
    env . actions . get ( ) . logic_title_launch_permit ( ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_title_generator_state_generating_type :: on_input ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_update ) )
    {
        env . actions . get ( ) . logic_title_update ( ) ;
    }
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_title_generator_state_generating_type :: transition ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_title_created ) )
    {
        return env . states . get ( ) . title_generator_state_finished ;
    }
    else
        return _state_type :: transition ( env ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_title_generator_state_initial_type :: transition ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_title_generator_command_start ) )
    {
        return env . states . get ( ) . title_generator_state_generating ;
    }
    else
        return _state_type :: transition ( env ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_title_performer_state_initial_type :: transition ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_title_performer_command_start ) )
    {
        return env . states . get ( ) . title_performer_state_performing ;
    }
    else
        return _state_type :: transition ( env ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_title_performer_state_performing_type :: on_input ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_render ) )
    {
        env . actions . get ( ) . logic_title_render ( ) ;
    }
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_update ) )
    {
        env . actions . get ( ) . logic_title_update ( ) ;
    }
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_title_performer_state_performing_type :: transition ( _state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_title_finished ) )
    {
        return env . states . get ( ) . title_performer_state_finished ;
    }
    else
        return _state_type :: transition ( env ) ;
}
template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _autogenerated_actions_type :: set_fsm
    ( typename platform_pointer :: template pointer < logic_application_fsm_autogenerated > arg_fsm )
{
    _fsm = arg_fsm ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _autogenerated_actions_type :: amusement_generator_command_start ( )
{
    platform_math :: make_num_whole ( _fsm . get ( ) . _current_autogenerated_inputs . machine_amusement_generator_command_start , true ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _autogenerated_actions_type :: amusement_performer_command_start ( )
{
    platform_math :: make_num_whole ( _fsm . get ( ) . _current_autogenerated_inputs . machine_amusement_performer_command_start , true ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _autogenerated_actions_type :: game_performer_command_start ( )
{
    platform_math :: make_num_whole ( _fsm . get ( ) . _current_autogenerated_inputs . machine_game_performer_command_start , true ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _autogenerated_actions_type :: main_menu_generator_command_start ( )
{
    platform_math :: make_num_whole ( _fsm . get ( ) . _current_autogenerated_inputs . machine_main_menu_generator_command_start , true ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _autogenerated_actions_type :: main_menu_performer_command_start ( )
{
    platform_math :: make_num_whole ( _fsm . get ( ) . _current_autogenerated_inputs . machine_main_menu_performer_command_start , true ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _autogenerated_actions_type :: text_generator_command_start ( )
{
    platform_math :: make_num_whole ( _fsm . get ( ) . _current_autogenerated_inputs . machine_text_generator_command_start , true ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _autogenerated_actions_type :: title_generator_command_start ( )
{
    platform_math :: make_num_whole ( _fsm . get ( ) . _current_autogenerated_inputs . machine_title_generator_command_start , true ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _autogenerated_actions_type :: title_performer_command_start ( )
{
    platform_math :: make_num_whole ( _fsm . get ( ) . _current_autogenerated_inputs . machine_title_performer_command_start , true ) ;
}

template < typename logic_application_fsm >
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: shy_logic_application_fsm_autogenerated ( )
{
    typename platform_pointer :: template pointer < logic_application_fsm_autogenerated > fsm ;
    platform_pointer :: bind ( fsm , * this ) ;
    _autogenerated_actions . set_fsm ( fsm ) ;

    platform_pointer :: bind ( _state_environment . autogenerated_actions , _autogenerated_actions ) ;
    platform_pointer :: bind ( _state_environment . autogenerated_inputs , _fixed_autogenerated_inputs ) ;
    platform_pointer :: bind ( _state_environment . states , _states ) ;

    platform_pointer :: bind ( _machine_amusement_generator_state , _states . amusement_generator_state_initial ) ;
    platform_pointer :: bind ( _machine_amusement_performer_state , _states . amusement_performer_state_initial ) ;
    platform_pointer :: bind ( _machine_game_performer_state , _states . game_performer_state_initial ) ;
    platform_pointer :: bind ( _machine_generator_state , _states . generator_state_initial ) ;
    platform_pointer :: bind ( _machine_main_menu_generator_state , _states . main_menu_generator_state_initial ) ;
    platform_pointer :: bind ( _machine_main_menu_performer_state , _states . main_menu_performer_state_initial ) ;
    platform_pointer :: bind ( _machine_performer_state , _states . performer_state_initial ) ;
    platform_pointer :: bind ( _machine_text_generator_state , _states . text_generator_state_initial ) ;
    platform_pointer :: bind ( _machine_title_generator_state , _states . title_generator_state_initial ) ;
    platform_pointer :: bind ( _machine_title_performer_state , _states . title_performer_state_initial ) ;
}

// autogenerated file end

