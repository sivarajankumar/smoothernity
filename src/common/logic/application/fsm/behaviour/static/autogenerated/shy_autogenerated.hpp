// autogenerated file begin

namespace shy_guts
{
    class machine_amusement_generator_state_finished_type
    : public so_called_common_engine_fsm_state_type
    {
    } ;

    class machine_amusement_generator_state_generating_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual void on_entry ( ) ;
        virtual void on_input ( ) ;
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_amusement_generator_state_initial_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_amusement_performer_state_finished_type
    : public so_called_common_engine_fsm_state_type
    {
    } ;

    class machine_amusement_performer_state_initial_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_amusement_performer_state_performing_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual void on_entry ( ) ;
        virtual void on_input ( ) ;
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_game_performer_state_initial_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_game_performer_state_performing_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual void on_entry ( ) ;
        virtual void on_input ( ) ;
    } ;

    class machine_generator_state_amusement_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual void on_entry ( ) ;
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_generator_state_game_type
    : public so_called_common_engine_fsm_state_type
    {
    } ;

    class machine_generator_state_initial_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_generator_state_main_menu_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual void on_entry ( ) ;
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_generator_state_salutation_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual void on_entry ( ) ;
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_generator_state_text_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual void on_entry ( ) ;
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_generator_state_title_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual void on_entry ( ) ;
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_main_menu_generator_state_finished_type
    : public so_called_common_engine_fsm_state_type
    {
    } ;

    class machine_main_menu_generator_state_generating_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual void on_entry ( ) ;
        virtual void on_input ( ) ;
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_main_menu_generator_state_initial_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_main_menu_performer_state_finished_type
    : public so_called_common_engine_fsm_state_type
    {
    } ;

    class machine_main_menu_performer_state_initial_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_main_menu_performer_state_performing_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual void on_entry ( ) ;
        virtual void on_input ( ) ;
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_performer_state_amusement_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual void on_entry ( ) ;
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_performer_state_game_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual void on_entry ( ) ;
    } ;

    class machine_performer_state_initial_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_performer_state_main_menu_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual void on_entry ( ) ;
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_performer_state_salutation_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual void on_entry ( ) ;
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_performer_state_title_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual void on_entry ( ) ;
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_salutation_cleaner_state_cleaning_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_salutation_cleaner_state_cleaning_letters_meshes_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual void on_entry ( ) ;
        virtual void on_input ( ) ;
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_salutation_cleaner_state_cleaning_letters_text_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual void on_entry ( ) ;
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_salutation_cleaner_state_finished_type
    : public so_called_common_engine_fsm_state_type
    {
    } ;

    class machine_salutation_cleaner_state_initial_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_salutation_generator_state_finished_type
    : public so_called_common_engine_fsm_state_type
    {
    } ;

    class machine_salutation_generator_state_generating_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_salutation_generator_state_generating_letters_meshes_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual void on_entry ( ) ;
        virtual void on_input ( ) ;
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_salutation_generator_state_generating_letters_text_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual void on_entry ( ) ;
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_salutation_generator_state_initial_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_salutation_performer_state_appearing_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual void on_entry ( ) ;
        virtual void on_input ( ) ;
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_salutation_performer_state_disappearing_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual void on_entry ( ) ;
        virtual void on_input ( ) ;
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_salutation_performer_state_finished_type
    : public so_called_common_engine_fsm_state_type
    {
    } ;

    class machine_salutation_performer_state_initial_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_salutation_performer_state_prepare_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual void on_entry ( ) ;
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_salutation_performer_state_waiting_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual void on_input ( ) ;
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_text_generator_state_finished_type
    : public so_called_common_engine_fsm_state_type
    {
    } ;

    class machine_text_generator_state_generating_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual void on_entry ( ) ;
        virtual void on_input ( ) ;
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_text_generator_state_initial_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_title_generator_state_finished_type
    : public so_called_common_engine_fsm_state_type
    {
    } ;

    class machine_title_generator_state_generating_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual void on_entry ( ) ;
        virtual void on_input ( ) ;
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_title_generator_state_initial_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_title_performer_state_finished_type
    : public so_called_common_engine_fsm_state_type
    {
    } ;

    class machine_title_performer_state_initial_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class machine_title_performer_state_performing_type
    : public so_called_common_engine_fsm_state_type
    {
    public :
        virtual void on_input ( ) ;
        virtual so_called_common_engine_fsm_state_type & transition ( ) ;
    } ;

    class behaviour_inputs_type
    {
    public :
        so_called_platform_math_num_whole_type machine_amusement_generator_command_start ;
        so_called_platform_math_num_whole_type machine_amusement_generator_state_is_finished ;
        so_called_platform_math_num_whole_type machine_amusement_performer_command_start ;
        so_called_platform_math_num_whole_type machine_amusement_performer_state_is_finished ;
        so_called_platform_math_num_whole_type machine_game_performer_command_start ;
        so_called_platform_math_num_whole_type machine_main_menu_generator_command_start ;
        so_called_platform_math_num_whole_type machine_main_menu_generator_state_is_finished ;
        so_called_platform_math_num_whole_type machine_main_menu_performer_command_start ;
        so_called_platform_math_num_whole_type machine_main_menu_performer_state_is_finished ;
        so_called_platform_math_num_whole_type machine_salutation_generator_command_start ;
        so_called_platform_math_num_whole_type machine_salutation_generator_state_is_finished ;
        so_called_platform_math_num_whole_type machine_salutation_performer_command_start ;
        so_called_platform_math_num_whole_type machine_salutation_performer_state_is_finished ;
        so_called_platform_math_num_whole_type machine_text_generator_command_start ;
        so_called_platform_math_num_whole_type machine_text_generator_state_is_finished ;
        so_called_platform_math_num_whole_type machine_title_generator_command_start ;
        so_called_platform_math_num_whole_type machine_title_generator_state_is_finished ;
        so_called_platform_math_num_whole_type machine_title_performer_command_start ;
        so_called_platform_math_num_whole_type machine_title_performer_state_is_finished ;
    } ;

    namespace states
    {
       static machine_amusement_generator_state_finished_type amusement_generator_state_finished ;
       static machine_amusement_generator_state_generating_type amusement_generator_state_generating ;
       static machine_amusement_generator_state_initial_type amusement_generator_state_initial ;
       static machine_amusement_performer_state_finished_type amusement_performer_state_finished ;
       static machine_amusement_performer_state_initial_type amusement_performer_state_initial ;
       static machine_amusement_performer_state_performing_type amusement_performer_state_performing ;
       static machine_game_performer_state_initial_type game_performer_state_initial ;
       static machine_game_performer_state_performing_type game_performer_state_performing ;
       static machine_generator_state_amusement_type generator_state_amusement ;
       static machine_generator_state_game_type generator_state_game ;
       static machine_generator_state_initial_type generator_state_initial ;
       static machine_generator_state_main_menu_type generator_state_main_menu ;
       static machine_generator_state_salutation_type generator_state_salutation ;
       static machine_generator_state_text_type generator_state_text ;
       static machine_generator_state_title_type generator_state_title ;
       static machine_main_menu_generator_state_finished_type main_menu_generator_state_finished ;
       static machine_main_menu_generator_state_generating_type main_menu_generator_state_generating ;
       static machine_main_menu_generator_state_initial_type main_menu_generator_state_initial ;
       static machine_main_menu_performer_state_finished_type main_menu_performer_state_finished ;
       static machine_main_menu_performer_state_initial_type main_menu_performer_state_initial ;
       static machine_main_menu_performer_state_performing_type main_menu_performer_state_performing ;
       static machine_performer_state_amusement_type performer_state_amusement ;
       static machine_performer_state_game_type performer_state_game ;
       static machine_performer_state_initial_type performer_state_initial ;
       static machine_performer_state_main_menu_type performer_state_main_menu ;
       static machine_performer_state_salutation_type performer_state_salutation ;
       static machine_performer_state_title_type performer_state_title ;
       static machine_salutation_cleaner_state_cleaning_type salutation_cleaner_state_cleaning ;
       static machine_salutation_cleaner_state_cleaning_letters_meshes_type salutation_cleaner_state_cleaning_letters_meshes ;
       static machine_salutation_cleaner_state_cleaning_letters_text_type salutation_cleaner_state_cleaning_letters_text ;
       static machine_salutation_cleaner_state_finished_type salutation_cleaner_state_finished ;
       static machine_salutation_cleaner_state_initial_type salutation_cleaner_state_initial ;
       static machine_salutation_generator_state_finished_type salutation_generator_state_finished ;
       static machine_salutation_generator_state_generating_type salutation_generator_state_generating ;
       static machine_salutation_generator_state_generating_letters_meshes_type salutation_generator_state_generating_letters_meshes ;
       static machine_salutation_generator_state_generating_letters_text_type salutation_generator_state_generating_letters_text ;
       static machine_salutation_generator_state_initial_type salutation_generator_state_initial ;
       static machine_salutation_performer_state_appearing_type salutation_performer_state_appearing ;
       static machine_salutation_performer_state_disappearing_type salutation_performer_state_disappearing ;
       static machine_salutation_performer_state_finished_type salutation_performer_state_finished ;
       static machine_salutation_performer_state_initial_type salutation_performer_state_initial ;
       static machine_salutation_performer_state_prepare_type salutation_performer_state_prepare ;
       static machine_salutation_performer_state_waiting_type salutation_performer_state_waiting ;
       static machine_text_generator_state_finished_type text_generator_state_finished ;
       static machine_text_generator_state_generating_type text_generator_state_generating ;
       static machine_text_generator_state_initial_type text_generator_state_initial ;
       static machine_title_generator_state_finished_type title_generator_state_finished ;
       static machine_title_generator_state_generating_type title_generator_state_generating ;
       static machine_title_generator_state_initial_type title_generator_state_initial ;
       static machine_title_performer_state_finished_type title_performer_state_finished ;
       static machine_title_performer_state_initial_type title_performer_state_initial ;
       static machine_title_performer_state_performing_type title_performer_state_performing ;
    }

    namespace behaviour_actions
    {
        static void amusement_generator_command_start ( ) ;
        static void amusement_performer_command_start ( ) ;
        static void game_performer_command_start ( ) ;
        static void main_menu_generator_command_start ( ) ;
        static void main_menu_performer_command_start ( ) ;
        static void salutation_generator_command_start ( ) ;
        static void salutation_performer_command_start ( ) ;
        static void text_generator_command_start ( ) ;
        static void title_generator_command_start ( ) ;
        static void title_performer_command_start ( ) ;
    }

    static so_called_platform_pointer_data_type < so_called_common_engine_fsm_state_type > machine_amusement_generator_state ;
    static so_called_platform_pointer_data_type < so_called_common_engine_fsm_state_type > machine_amusement_performer_state ;
    static so_called_platform_pointer_data_type < so_called_common_engine_fsm_state_type > machine_game_performer_state ;
    static so_called_platform_pointer_data_type < so_called_common_engine_fsm_state_type > machine_generator_state ;
    static so_called_platform_pointer_data_type < so_called_common_engine_fsm_state_type > machine_main_menu_generator_state ;
    static so_called_platform_pointer_data_type < so_called_common_engine_fsm_state_type > machine_main_menu_performer_state ;
    static so_called_platform_pointer_data_type < so_called_common_engine_fsm_state_type > machine_performer_state ;
    static so_called_platform_pointer_data_type < so_called_common_engine_fsm_state_type > machine_salutation_cleaner_state ;
    static so_called_platform_pointer_data_type < so_called_common_engine_fsm_state_type > machine_salutation_generator_state ;
    static so_called_platform_pointer_data_type < so_called_common_engine_fsm_state_type > machine_salutation_performer_state ;
    static so_called_platform_pointer_data_type < so_called_common_engine_fsm_state_type > machine_text_generator_state ;
    static so_called_platform_pointer_data_type < so_called_common_engine_fsm_state_type > machine_title_generator_state ;
    static so_called_platform_pointer_data_type < so_called_common_engine_fsm_state_type > machine_title_performer_state ;

    static so_called_platform_math_num_whole_type fsm_running ;
    static behaviour_inputs_type behaviour_inputs_current ;
    static behaviour_inputs_type behaviour_inputs_fixed ;
    static so_called_platform_pointer_data_type < so_called_common_logic_application_fsm_inputs_type > inputs_current ;
    static so_called_platform_pointer_data_type < so_called_common_logic_application_fsm_inputs_type > inputs_fixed ;
}

void shy_guts :: machine_amusement_generator_state_generating_type :: on_entry ( )
{
    so_called_common_logic_application_fsm_actions :: logic_amusement_creation_permit ( ) ;
}

void shy_guts :: machine_amusement_generator_state_generating_type :: on_input ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_application_update ) )
    {
        so_called_common_logic_application_fsm_actions :: logic_amusement_update ( ) ;
        shy_guts :: inputs_current . get ( ) . logic_application_update = so_called_platform_math_consts :: whole_false ;
    }
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_amusement_generator_state_generating_type :: transition ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_amusement_created ) )
        return shy_guts :: states :: amusement_generator_state_finished ;
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_amusement_generator_state_initial_type :: transition ( )
{
    if
    (  so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . stage_amusement_enabled )
    && so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_amusement_generator_command_start )
    )
    {
        return shy_guts :: states :: amusement_generator_state_generating ;
    }
    else if
    (  so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . stage_amusement_disabled )
    && so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_amusement_generator_command_start )
    )
    {
        return shy_guts :: states :: amusement_generator_state_finished ;
    }
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_amusement_performer_state_initial_type :: transition ( )
{
    if
    (  so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . stage_amusement_enabled )
    && so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_amusement_performer_command_start )
    )
    {
        return shy_guts :: states :: amusement_performer_state_performing ;
    }
    else if
    (  so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . stage_amusement_disabled )
    && so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_amusement_performer_command_start )
    )
    {
        return shy_guts :: states :: amusement_performer_state_finished ;
    }
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

void shy_guts :: machine_amusement_performer_state_performing_type :: on_entry ( )
{
    so_called_common_logic_application_fsm_actions :: logic_amusement_launch_permit ( ) ;
}

void shy_guts :: machine_amusement_performer_state_performing_type :: on_input ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_application_render ) )
    {
        so_called_common_logic_application_fsm_actions :: logic_amusement_render ( ) ;
        shy_guts :: inputs_current . get ( ) . logic_application_render = so_called_platform_math_consts :: whole_false ;
    }
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_application_update ) )
    {
        so_called_common_logic_application_fsm_actions :: logic_amusement_update ( ) ;
        shy_guts :: inputs_current . get ( ) . logic_application_update = so_called_platform_math_consts :: whole_false ;
    }
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_amusement_performer_state_performing_type :: transition ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_amusement_finished ) )
        return shy_guts :: states :: amusement_performer_state_finished ;
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_game_performer_state_initial_type :: transition ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_game_performer_command_start ) )
        return shy_guts :: states :: game_performer_state_performing ;
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

void shy_guts :: machine_game_performer_state_performing_type :: on_entry ( )
{
    so_called_common_logic_application_fsm_actions :: logic_game_launch_permit ( ) ;
}

void shy_guts :: machine_game_performer_state_performing_type :: on_input ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_application_render ) )
    {
        so_called_common_logic_application_fsm_actions :: logic_game_render ( ) ;
        shy_guts :: inputs_current . get ( ) . logic_application_render = so_called_platform_math_consts :: whole_false ;
    }
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_application_update ) )
    {
        so_called_common_logic_application_fsm_actions :: logic_game_update ( ) ;
        shy_guts :: inputs_current . get ( ) . logic_application_update = so_called_platform_math_consts :: whole_false ;
    }
}

void shy_guts :: machine_generator_state_amusement_type :: on_entry ( )
{
    shy_guts :: behaviour_actions :: amusement_generator_command_start ( ) ;
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_generator_state_amusement_type :: transition ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_amusement_generator_state_is_finished ) )
        return shy_guts :: states :: generator_state_game ;
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_generator_state_initial_type :: transition ( )
{
    return shy_guts :: states :: generator_state_text ;
}

void shy_guts :: machine_generator_state_main_menu_type :: on_entry ( )
{
    shy_guts :: behaviour_actions :: main_menu_generator_command_start ( ) ;
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_generator_state_main_menu_type :: transition ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_main_menu_generator_state_is_finished ) )
        return shy_guts :: states :: generator_state_amusement ;
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

void shy_guts :: machine_generator_state_salutation_type :: on_entry ( )
{
    shy_guts :: behaviour_actions :: salutation_generator_command_start ( ) ;
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_generator_state_salutation_type :: transition ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_salutation_generator_state_is_finished ) )
        return shy_guts :: states :: generator_state_title ;
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

void shy_guts :: machine_generator_state_text_type :: on_entry ( )
{
    shy_guts :: behaviour_actions :: text_generator_command_start ( ) ;
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_generator_state_text_type :: transition ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_text_generator_state_is_finished ) )
        return shy_guts :: states :: generator_state_salutation ;
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

void shy_guts :: machine_generator_state_title_type :: on_entry ( )
{
    shy_guts :: behaviour_actions :: title_generator_command_start ( ) ;
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_generator_state_title_type :: transition ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_title_generator_state_is_finished ) )
        return shy_guts :: states :: generator_state_main_menu ;
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

void shy_guts :: machine_main_menu_generator_state_generating_type :: on_entry ( )
{
    so_called_common_logic_application_fsm_actions :: logic_main_menu_creation_permit ( ) ;
}

void shy_guts :: machine_main_menu_generator_state_generating_type :: on_input ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_application_update ) )
    {
        so_called_common_logic_application_fsm_actions :: logic_main_menu_update ( ) ;
        shy_guts :: inputs_current . get ( ) . logic_application_update = so_called_platform_math_consts :: whole_false ;
    }
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_main_menu_generator_state_generating_type :: transition ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_main_menu_created ) )
        return shy_guts :: states :: main_menu_generator_state_finished ;
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_main_menu_generator_state_initial_type :: transition ( )
{
    if
    (  so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . stage_main_menu_enabled )
    && so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_main_menu_generator_command_start )
    )
    {
        return shy_guts :: states :: main_menu_generator_state_generating ;
    }
    else if
    (  so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . stage_main_menu_disabled )
    && so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_main_menu_generator_command_start )
    )
    {
        return shy_guts :: states :: main_menu_generator_state_finished ;
    }
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_main_menu_performer_state_initial_type :: transition ( )
{
    if
    (  so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . stage_main_menu_enabled )
    && so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_main_menu_performer_command_start )
    )
    {
        return shy_guts :: states :: main_menu_performer_state_performing ;
    }
    else if
    (  so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . stage_main_menu_disabled )
    && so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_main_menu_performer_command_start )
    )
    {
        return shy_guts :: states :: main_menu_performer_state_finished ;
    }
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

void shy_guts :: machine_main_menu_performer_state_performing_type :: on_entry ( )
{
    so_called_common_logic_application_fsm_actions :: logic_main_menu_launch_permit ( ) ;
}

void shy_guts :: machine_main_menu_performer_state_performing_type :: on_input ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_application_render ) )
    {
        so_called_common_logic_application_fsm_actions :: logic_main_menu_render ( ) ;
        shy_guts :: inputs_current . get ( ) . logic_application_render = so_called_platform_math_consts :: whole_false ;
    }
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_application_update ) )
    {
        so_called_common_logic_application_fsm_actions :: logic_main_menu_update ( ) ;
        shy_guts :: inputs_current . get ( ) . logic_application_update = so_called_platform_math_consts :: whole_false ;
    }
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_main_menu_performer_state_performing_type :: transition ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_main_menu_finished ) )
        return shy_guts :: states :: main_menu_performer_state_finished ;
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

void shy_guts :: machine_performer_state_amusement_type :: on_entry ( )
{
    shy_guts :: behaviour_actions :: amusement_performer_command_start ( ) ;
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_performer_state_amusement_type :: transition ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_amusement_performer_state_is_finished ) )
        return shy_guts :: states :: performer_state_game ;
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

void shy_guts :: machine_performer_state_game_type :: on_entry ( )
{
    shy_guts :: behaviour_actions :: game_performer_command_start ( ) ;
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_performer_state_initial_type :: transition ( )
{
    return shy_guts :: states :: performer_state_salutation ;
}

void shy_guts :: machine_performer_state_main_menu_type :: on_entry ( )
{
    shy_guts :: behaviour_actions :: main_menu_performer_command_start ( ) ;
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_performer_state_main_menu_type :: transition ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_main_menu_performer_state_is_finished ) )
        return shy_guts :: states :: performer_state_amusement ;
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

void shy_guts :: machine_performer_state_salutation_type :: on_entry ( )
{
    shy_guts :: behaviour_actions :: salutation_performer_command_start ( ) ;
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_performer_state_salutation_type :: transition ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_salutation_performer_state_is_finished ) )
        return shy_guts :: states :: performer_state_title ;
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

void shy_guts :: machine_performer_state_title_type :: on_entry ( )
{
    shy_guts :: behaviour_actions :: title_performer_command_start ( ) ;
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_performer_state_title_type :: transition ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_title_performer_state_is_finished ) )
        return shy_guts :: states :: performer_state_main_menu ;
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_salutation_cleaner_state_cleaning_type :: transition ( )
{
    return shy_guts :: states :: salutation_cleaner_state_cleaning_letters_text ;
}

void shy_guts :: machine_salutation_cleaner_state_cleaning_letters_meshes_type :: on_entry ( )
{
    so_called_common_logic_application_fsm_actions :: logic_salutation_letters_meshes_cleaner_clean ( ) ;
}

void shy_guts :: machine_salutation_cleaner_state_cleaning_letters_meshes_type :: on_input ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_application_update ) )
    {
        so_called_common_logic_application_fsm_actions :: logic_salutation_letters_meshes_cleaner_update ( ) ;
        shy_guts :: inputs_current . get ( ) . logic_application_update = so_called_platform_math_consts :: whole_false ;
    }
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_salutation_cleaner_state_cleaning_letters_meshes_type :: transition ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_salutation_letters_meshes_cleaner_clean_finished ) )
        return shy_guts :: states :: salutation_cleaner_state_finished ;
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

void shy_guts :: machine_salutation_cleaner_state_cleaning_letters_text_type :: on_entry ( )
{
    so_called_common_logic_application_fsm_actions :: logic_salutation_letters_text_cleaner_clean ( ) ;
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_salutation_cleaner_state_cleaning_letters_text_type :: transition ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_salutation_letters_text_cleaner_clean_finished ) )
        return shy_guts :: states :: salutation_cleaner_state_cleaning_letters_meshes ;
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_salutation_cleaner_state_initial_type :: transition ( )
{
    if
    (  so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . stage_salutation_enabled )
    && so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_salutation_performer_state_is_finished )
    )
    {
        return shy_guts :: states :: salutation_cleaner_state_cleaning ;
    }
    else if
    (  so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . stage_salutation_disabled )
    && so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_salutation_performer_state_is_finished )
    )
    {
        return shy_guts :: states :: salutation_cleaner_state_finished ;
    }
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_salutation_generator_state_generating_type :: transition ( )
{
    return shy_guts :: states :: salutation_generator_state_generating_letters_text ;
}

void shy_guts :: machine_salutation_generator_state_generating_letters_meshes_type :: on_entry ( )
{
    so_called_common_logic_application_fsm_actions :: logic_salutation_letters_meshes_generator_generate ( ) ;
}

void shy_guts :: machine_salutation_generator_state_generating_letters_meshes_type :: on_input ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_application_update ) )
    {
        so_called_common_logic_application_fsm_actions :: logic_salutation_letters_meshes_generator_update ( ) ;
        shy_guts :: inputs_current . get ( ) . logic_application_update = so_called_platform_math_consts :: whole_false ;
    }
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_salutation_generator_state_generating_letters_meshes_type :: transition ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_salutation_letters_meshes_generator_generate_finished ) )
        return shy_guts :: states :: salutation_generator_state_finished ;
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

void shy_guts :: machine_salutation_generator_state_generating_letters_text_type :: on_entry ( )
{
    so_called_common_logic_application_fsm_actions :: logic_salutation_letters_text_generator_generate ( ) ;
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_salutation_generator_state_generating_letters_text_type :: transition ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_salutation_letters_text_generator_generate_finished ) )
        return shy_guts :: states :: salutation_generator_state_generating_letters_meshes ;
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_salutation_generator_state_initial_type :: transition ( )
{
    if
    (  so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . stage_salutation_enabled )
    && so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_salutation_generator_command_start )
    )
    {
        return shy_guts :: states :: salutation_generator_state_generating ;
    }
    else if
    (  so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . stage_salutation_disabled )
    && so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_salutation_generator_command_start )
    )
    {
        return shy_guts :: states :: salutation_generator_state_finished ;
    }
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

void shy_guts :: machine_salutation_performer_state_appearing_type :: on_entry ( )
{
    so_called_common_logic_application_fsm_actions :: logic_salutation_timer_appear_run ( ) ;
}

void shy_guts :: machine_salutation_performer_state_appearing_type :: on_input ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_application_render ) )
    {
        so_called_common_logic_application_fsm_actions :: logic_salutation_renderer_render ( ) ;
        shy_guts :: inputs_current . get ( ) . logic_application_render = so_called_platform_math_consts :: whole_false ;
    }
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_application_update ) )
    {
        so_called_common_logic_application_fsm_actions :: logic_salutation_animation_zoom_step ( ) ;
        so_called_common_logic_application_fsm_actions :: logic_salutation_letters_animation_appear_step ( ) ;
        so_called_common_logic_application_fsm_actions :: logic_salutation_letters_animation_roll_in_step ( ) ;
        so_called_common_logic_application_fsm_actions :: logic_salutation_timer_appear_update ( ) ;
        shy_guts :: inputs_current . get ( ) . logic_application_update = so_called_platform_math_consts :: whole_false ;
    }
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_salutation_performer_state_appearing_type :: transition ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_salutation_timer_appear_run_finished ) )
        return shy_guts :: states :: salutation_performer_state_disappearing ;
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

void shy_guts :: machine_salutation_performer_state_disappearing_type :: on_entry ( )
{
    so_called_common_logic_application_fsm_actions :: logic_salutation_timer_disappear_run ( ) ;
}

void shy_guts :: machine_salutation_performer_state_disappearing_type :: on_input ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_application_render ) )
    {
        so_called_common_logic_application_fsm_actions :: logic_salutation_renderer_render ( ) ;
        shy_guts :: inputs_current . get ( ) . logic_application_render = so_called_platform_math_consts :: whole_false ;
    }
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_application_update ) )
    {
        so_called_common_logic_application_fsm_actions :: logic_salutation_animation_zoom_step ( ) ;
        so_called_common_logic_application_fsm_actions :: logic_salutation_letters_animation_disappear_step ( ) ;
        so_called_common_logic_application_fsm_actions :: logic_salutation_letters_animation_roll_out_step ( ) ;
        so_called_common_logic_application_fsm_actions :: logic_salutation_timer_disappear_update ( ) ;
        shy_guts :: inputs_current . get ( ) . logic_application_update = so_called_platform_math_consts :: whole_false ;
    }
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_salutation_performer_state_disappearing_type :: transition ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_salutation_timer_disappear_run_finished ) )
        return shy_guts :: states :: salutation_performer_state_finished ;
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_salutation_performer_state_initial_type :: transition ( )
{
    if
    (  so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . stage_salutation_enabled )
    && so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_salutation_performer_command_start )
    )
    {
        return shy_guts :: states :: salutation_performer_state_waiting ;
    }
    else if
    (  so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . stage_salutation_disabled )
    && so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_salutation_performer_command_start )
    )
    {
        return shy_guts :: states :: salutation_performer_state_finished ;
    }
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

void shy_guts :: machine_salutation_performer_state_prepare_type :: on_entry ( )
{
    so_called_common_logic_application_fsm_actions :: logic_salutation_animation_zoom_rewind ( ) ;
    so_called_common_logic_application_fsm_actions :: logic_salutation_letters_animation_appear_rewind ( ) ;
    so_called_common_logic_application_fsm_actions :: logic_salutation_letters_animation_disappear_rewind ( ) ;
    so_called_common_logic_application_fsm_actions :: logic_salutation_letters_animation_roll_in_rewind ( ) ;
    so_called_common_logic_application_fsm_actions :: logic_salutation_letters_animation_roll_out_rewind ( ) ;
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_salutation_performer_state_prepare_type :: transition ( )
{
    return shy_guts :: states :: salutation_performer_state_appearing ;
}

void shy_guts :: machine_salutation_performer_state_waiting_type :: on_input ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_application_render ) )
    {
        so_called_common_logic_application_fsm_actions :: logic_vacuum_render ( ) ;
        shy_guts :: inputs_current . get ( ) . logic_application_render = so_called_platform_math_consts :: whole_false ;
    }
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_application_update ) )
    {
        so_called_common_logic_application_fsm_actions :: logic_vacuum_update ( ) ;
        shy_guts :: inputs_current . get ( ) . logic_application_update = so_called_platform_math_consts :: whole_false ;
    }
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_salutation_performer_state_waiting_type :: transition ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_salutation_generator_state_is_finished ) )
        return shy_guts :: states :: salutation_performer_state_prepare ;
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

void shy_guts :: machine_text_generator_state_generating_type :: on_entry ( )
{
    so_called_common_logic_application_fsm_actions :: logic_text_prepare_permit ( ) ;
}

void shy_guts :: machine_text_generator_state_generating_type :: on_input ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_application_update ) )
    {
        so_called_common_logic_application_fsm_actions :: logic_text_update ( ) ;
        shy_guts :: inputs_current . get ( ) . logic_application_update = so_called_platform_math_consts :: whole_false ;
    }
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_text_generator_state_generating_type :: transition ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_text_prepared ) )
        return shy_guts :: states :: text_generator_state_finished ;
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_text_generator_state_initial_type :: transition ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_text_generator_command_start ) )
        return shy_guts :: states :: text_generator_state_generating ;
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

void shy_guts :: machine_title_generator_state_generating_type :: on_entry ( )
{
    so_called_common_logic_application_fsm_actions :: logic_title_launch_permit ( ) ;
}

void shy_guts :: machine_title_generator_state_generating_type :: on_input ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_application_update ) )
    {
        so_called_common_logic_application_fsm_actions :: logic_title_update ( ) ;
        shy_guts :: inputs_current . get ( ) . logic_application_update = so_called_platform_math_consts :: whole_false ;
    }
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_title_generator_state_generating_type :: transition ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_title_created ) )
        return shy_guts :: states :: title_generator_state_finished ;
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_title_generator_state_initial_type :: transition ( )
{
    if
    (  so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . stage_title_enabled )
    && so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_title_generator_command_start )
    )
    {
        return shy_guts :: states :: title_generator_state_generating ;
    }
    else if
    (  so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . stage_title_disabled )
    && so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_title_generator_command_start )
    )
    {
        return shy_guts :: states :: title_generator_state_finished ;
    }
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_title_performer_state_initial_type :: transition ( )
{
    if
    (  so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . stage_title_enabled )
    && so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_title_performer_command_start )
    )
    {
        return shy_guts :: states :: title_performer_state_performing ;
    }
    else if
    (  so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . stage_title_disabled )
    && so_called_platform_conditions :: whole_is_true ( shy_guts :: behaviour_inputs_fixed . machine_title_performer_command_start )
    )
    {
        return shy_guts :: states :: title_performer_state_finished ;
    }
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

void shy_guts :: machine_title_performer_state_performing_type :: on_input ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_application_render ) )
    {
        so_called_common_logic_application_fsm_actions :: logic_title_render ( ) ;
        shy_guts :: inputs_current . get ( ) . logic_application_render = so_called_platform_math_consts :: whole_false ;
    }
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_application_update ) )
    {
        so_called_common_logic_application_fsm_actions :: logic_title_update ( ) ;
        shy_guts :: inputs_current . get ( ) . logic_application_update = so_called_platform_math_consts :: whole_false ;
    }
}

so_called_common_engine_fsm_state_type & shy_guts :: machine_title_performer_state_performing_type :: transition ( )
{
    if ( so_called_platform_conditions :: whole_is_true ( shy_guts :: inputs_fixed . get ( ) . logic_title_finished ) )
        return shy_guts :: states :: title_performer_state_finished ;
    else
        return so_called_common_engine_fsm_state_type :: transition ( ) ;
}

void shy_guts :: behaviour_actions :: amusement_generator_command_start ( )
{
    shy_guts :: behaviour_inputs_current . machine_amusement_generator_command_start = so_called_platform_math_consts :: whole_true ;
}

void shy_guts :: behaviour_actions :: amusement_performer_command_start ( )
{
    shy_guts :: behaviour_inputs_current . machine_amusement_performer_command_start = so_called_platform_math_consts :: whole_true ;
}

void shy_guts :: behaviour_actions :: game_performer_command_start ( )
{
    shy_guts :: behaviour_inputs_current . machine_game_performer_command_start = so_called_platform_math_consts :: whole_true ;
}

void shy_guts :: behaviour_actions :: main_menu_generator_command_start ( )
{
    shy_guts :: behaviour_inputs_current . machine_main_menu_generator_command_start = so_called_platform_math_consts :: whole_true ;
}

void shy_guts :: behaviour_actions :: main_menu_performer_command_start ( )
{
    shy_guts :: behaviour_inputs_current . machine_main_menu_performer_command_start = so_called_platform_math_consts :: whole_true ;
}

void shy_guts :: behaviour_actions :: salutation_generator_command_start ( )
{
    shy_guts :: behaviour_inputs_current . machine_salutation_generator_command_start = so_called_platform_math_consts :: whole_true ;
}

void shy_guts :: behaviour_actions :: salutation_performer_command_start ( )
{
    shy_guts :: behaviour_inputs_current . machine_salutation_performer_command_start = so_called_platform_math_consts :: whole_true ;
}

void shy_guts :: behaviour_actions :: text_generator_command_start ( )
{
    shy_guts :: behaviour_inputs_current . machine_text_generator_command_start = so_called_platform_math_consts :: whole_true ;
}

void shy_guts :: behaviour_actions :: title_generator_command_start ( )
{
    shy_guts :: behaviour_inputs_current . machine_title_generator_command_start = so_called_platform_math_consts :: whole_true ;
}

void shy_guts :: behaviour_actions :: title_performer_command_start ( )
{
    shy_guts :: behaviour_inputs_current . machine_title_performer_command_start = so_called_platform_math_consts :: whole_true ;
}

void so_called_common_logic_application_fsm_behaviour_static :: determine_behaviour_inputs_change ( so_called_platform_math_num_whole_type & inputs_changed )
{
    if ( so_called_platform_conditions :: wholes_are_equal
            ( shy_guts :: behaviour_inputs_current . machine_amusement_generator_command_start
            , shy_guts :: behaviour_inputs_fixed . machine_amusement_generator_command_start
            )
      && so_called_platform_conditions :: wholes_are_equal
            ( shy_guts :: behaviour_inputs_current . machine_amusement_generator_state_is_finished
            , shy_guts :: behaviour_inputs_fixed . machine_amusement_generator_state_is_finished
            )
      && so_called_platform_conditions :: wholes_are_equal
            ( shy_guts :: behaviour_inputs_current . machine_amusement_performer_command_start
            , shy_guts :: behaviour_inputs_fixed . machine_amusement_performer_command_start
            )
      && so_called_platform_conditions :: wholes_are_equal
            ( shy_guts :: behaviour_inputs_current . machine_amusement_performer_state_is_finished
            , shy_guts :: behaviour_inputs_fixed . machine_amusement_performer_state_is_finished
            )
      && so_called_platform_conditions :: wholes_are_equal
            ( shy_guts :: behaviour_inputs_current . machine_game_performer_command_start
            , shy_guts :: behaviour_inputs_fixed . machine_game_performer_command_start
            )
      && so_called_platform_conditions :: wholes_are_equal
            ( shy_guts :: behaviour_inputs_current . machine_main_menu_generator_command_start
            , shy_guts :: behaviour_inputs_fixed . machine_main_menu_generator_command_start
            )
      && so_called_platform_conditions :: wholes_are_equal
            ( shy_guts :: behaviour_inputs_current . machine_main_menu_generator_state_is_finished
            , shy_guts :: behaviour_inputs_fixed . machine_main_menu_generator_state_is_finished
            )
      && so_called_platform_conditions :: wholes_are_equal
            ( shy_guts :: behaviour_inputs_current . machine_main_menu_performer_command_start
            , shy_guts :: behaviour_inputs_fixed . machine_main_menu_performer_command_start
            )
      && so_called_platform_conditions :: wholes_are_equal
            ( shy_guts :: behaviour_inputs_current . machine_main_menu_performer_state_is_finished
            , shy_guts :: behaviour_inputs_fixed . machine_main_menu_performer_state_is_finished
            )
      && so_called_platform_conditions :: wholes_are_equal
            ( shy_guts :: behaviour_inputs_current . machine_salutation_generator_command_start
            , shy_guts :: behaviour_inputs_fixed . machine_salutation_generator_command_start
            )
      && so_called_platform_conditions :: wholes_are_equal
            ( shy_guts :: behaviour_inputs_current . machine_salutation_generator_state_is_finished
            , shy_guts :: behaviour_inputs_fixed . machine_salutation_generator_state_is_finished
            )
      && so_called_platform_conditions :: wholes_are_equal
            ( shy_guts :: behaviour_inputs_current . machine_salutation_performer_command_start
            , shy_guts :: behaviour_inputs_fixed . machine_salutation_performer_command_start
            )
      && so_called_platform_conditions :: wholes_are_equal
            ( shy_guts :: behaviour_inputs_current . machine_salutation_performer_state_is_finished
            , shy_guts :: behaviour_inputs_fixed . machine_salutation_performer_state_is_finished
            )
      && so_called_platform_conditions :: wholes_are_equal
            ( shy_guts :: behaviour_inputs_current . machine_text_generator_command_start
            , shy_guts :: behaviour_inputs_fixed . machine_text_generator_command_start
            )
      && so_called_platform_conditions :: wholes_are_equal
            ( shy_guts :: behaviour_inputs_current . machine_text_generator_state_is_finished
            , shy_guts :: behaviour_inputs_fixed . machine_text_generator_state_is_finished
            )
      && so_called_platform_conditions :: wholes_are_equal
            ( shy_guts :: behaviour_inputs_current . machine_title_generator_command_start
            , shy_guts :: behaviour_inputs_fixed . machine_title_generator_command_start
            )
      && so_called_platform_conditions :: wholes_are_equal
            ( shy_guts :: behaviour_inputs_current . machine_title_generator_state_is_finished
            , shy_guts :: behaviour_inputs_fixed . machine_title_generator_state_is_finished
            )
      && so_called_platform_conditions :: wholes_are_equal
            ( shy_guts :: behaviour_inputs_current . machine_title_performer_command_start
            , shy_guts :: behaviour_inputs_fixed . machine_title_performer_command_start
            )
      && so_called_platform_conditions :: wholes_are_equal
            ( shy_guts :: behaviour_inputs_current . machine_title_performer_state_is_finished
            , shy_guts :: behaviour_inputs_fixed . machine_title_performer_state_is_finished
            )
       )
    {
        inputs_changed = so_called_platform_math_consts :: whole_false ;
    }
    else
        inputs_changed = so_called_platform_math_consts :: whole_true ;
}

void so_called_common_logic_application_fsm_behaviour_static :: init ( )
{
    reset_behaviour_input_events ( ) ;

    shy_guts :: fsm_running = so_called_platform_math_consts :: whole_false ;

    so_called_platform_pointer :: bind
        ( shy_guts :: machine_amusement_generator_state
        , shy_guts :: states :: amusement_generator_state_initial
        ) ;
    so_called_platform_pointer :: bind
        ( shy_guts :: machine_amusement_performer_state
        , shy_guts :: states :: amusement_performer_state_initial
        ) ;
    so_called_platform_pointer :: bind
        ( shy_guts :: machine_game_performer_state
        , shy_guts :: states :: game_performer_state_initial
        ) ;
    so_called_platform_pointer :: bind
        ( shy_guts :: machine_generator_state
        , shy_guts :: states :: generator_state_initial
        ) ;
    so_called_platform_pointer :: bind
        ( shy_guts :: machine_main_menu_generator_state
        , shy_guts :: states :: main_menu_generator_state_initial
        ) ;
    so_called_platform_pointer :: bind
        ( shy_guts :: machine_main_menu_performer_state
        , shy_guts :: states :: main_menu_performer_state_initial
        ) ;
    so_called_platform_pointer :: bind
        ( shy_guts :: machine_performer_state
        , shy_guts :: states :: performer_state_initial
        ) ;
    so_called_platform_pointer :: bind
        ( shy_guts :: machine_salutation_cleaner_state
        , shy_guts :: states :: salutation_cleaner_state_initial
        ) ;
    so_called_platform_pointer :: bind
        ( shy_guts :: machine_salutation_generator_state
        , shy_guts :: states :: salutation_generator_state_initial
        ) ;
    so_called_platform_pointer :: bind
        ( shy_guts :: machine_salutation_performer_state
        , shy_guts :: states :: salutation_performer_state_initial
        ) ;
    so_called_platform_pointer :: bind
        ( shy_guts :: machine_text_generator_state
        , shy_guts :: states :: text_generator_state_initial
        ) ;
    so_called_platform_pointer :: bind
        ( shy_guts :: machine_title_generator_state
        , shy_guts :: states :: title_generator_state_initial
        ) ;
    so_called_platform_pointer :: bind
        ( shy_guts :: machine_title_performer_state
        , shy_guts :: states :: title_performer_state_initial
        ) ;
}

void so_called_common_logic_application_fsm_behaviour_static :: is_fsm_running ( so_called_platform_math_num_whole_type & result )
{
    result = shy_guts :: fsm_running ;
}

void so_called_common_logic_application_fsm_behaviour_static :: recalc_current_behaviour_inputs ( )
{
    so_called_platform_pointer :: is_bound_to
        ( shy_guts :: behaviour_inputs_current . machine_amusement_generator_state_is_finished
        , shy_guts :: machine_amusement_generator_state
        , shy_guts :: states :: amusement_generator_state_finished
        ) ;
    so_called_platform_pointer :: is_bound_to
        ( shy_guts :: behaviour_inputs_current . machine_amusement_performer_state_is_finished
        , shy_guts :: machine_amusement_performer_state
        , shy_guts :: states :: amusement_performer_state_finished
        ) ;
    so_called_platform_pointer :: is_bound_to
        ( shy_guts :: behaviour_inputs_current . machine_main_menu_generator_state_is_finished
        , shy_guts :: machine_main_menu_generator_state
        , shy_guts :: states :: main_menu_generator_state_finished
        ) ;
    so_called_platform_pointer :: is_bound_to
        ( shy_guts :: behaviour_inputs_current . machine_main_menu_performer_state_is_finished
        , shy_guts :: machine_main_menu_performer_state
        , shy_guts :: states :: main_menu_performer_state_finished
        ) ;
    so_called_platform_pointer :: is_bound_to
        ( shy_guts :: behaviour_inputs_current . machine_salutation_generator_state_is_finished
        , shy_guts :: machine_salutation_generator_state
        , shy_guts :: states :: salutation_generator_state_finished
        ) ;
    so_called_platform_pointer :: is_bound_to
        ( shy_guts :: behaviour_inputs_current . machine_salutation_performer_state_is_finished
        , shy_guts :: machine_salutation_performer_state
        , shy_guts :: states :: salutation_performer_state_finished
        ) ;
    so_called_platform_pointer :: is_bound_to
        ( shy_guts :: behaviour_inputs_current . machine_text_generator_state_is_finished
        , shy_guts :: machine_text_generator_state
        , shy_guts :: states :: text_generator_state_finished
        ) ;
    so_called_platform_pointer :: is_bound_to
        ( shy_guts :: behaviour_inputs_current . machine_title_generator_state_is_finished
        , shy_guts :: machine_title_generator_state
        , shy_guts :: states :: title_generator_state_finished
        ) ;
    so_called_platform_pointer :: is_bound_to
        ( shy_guts :: behaviour_inputs_current . machine_title_performer_state_is_finished
        , shy_guts :: machine_title_performer_state
        , shy_guts :: states :: title_performer_state_finished
        ) ;
}

void so_called_common_logic_application_fsm_behaviour_static :: reset_behaviour_input_events ( )
{
    shy_guts :: behaviour_inputs_current . machine_amusement_generator_command_start = so_called_platform_math_consts :: whole_false ;
    shy_guts :: behaviour_inputs_current . machine_amusement_performer_command_start = so_called_platform_math_consts :: whole_false ;
    shy_guts :: behaviour_inputs_current . machine_game_performer_command_start = so_called_platform_math_consts :: whole_false ;
    shy_guts :: behaviour_inputs_current . machine_main_menu_generator_command_start = so_called_platform_math_consts :: whole_false ;
    shy_guts :: behaviour_inputs_current . machine_main_menu_performer_command_start = so_called_platform_math_consts :: whole_false ;
    shy_guts :: behaviour_inputs_current . machine_salutation_generator_command_start = so_called_platform_math_consts :: whole_false ;
    shy_guts :: behaviour_inputs_current . machine_salutation_performer_command_start = so_called_platform_math_consts :: whole_false ;
    shy_guts :: behaviour_inputs_current . machine_text_generator_command_start = so_called_platform_math_consts :: whole_false ;
    shy_guts :: behaviour_inputs_current . machine_title_generator_command_start = so_called_platform_math_consts :: whole_false ;
    shy_guts :: behaviour_inputs_current . machine_title_performer_command_start = so_called_platform_math_consts :: whole_false ;
}

void so_called_common_logic_application_fsm_behaviour_static :: run_fsm_begin ( )
{
    shy_guts :: fsm_running = so_called_platform_math_consts :: whole_true ;
}

void so_called_common_logic_application_fsm_behaviour_static :: run_fsm_end ( )
{
    shy_guts :: fsm_running = so_called_platform_math_consts :: whole_false ;
}

void so_called_common_logic_application_fsm_behaviour_static :: set_inputs
    ( so_called_platform_pointer_data_type < so_called_common_logic_application_fsm_inputs_type > inputs_current
    , so_called_platform_pointer_data_type < so_called_common_logic_application_fsm_inputs_type > inputs_fixed
    )
{
    shy_guts :: inputs_current = inputs_current ;
    shy_guts :: inputs_fixed = inputs_fixed ;
}

void so_called_common_logic_application_fsm_behaviour_static :: tick_all_fsms ( )
{
    so_called_common_engine_fsm_stateless :: tick_single_fsm ( shy_guts :: machine_amusement_generator_state ) ;
    so_called_common_engine_fsm_stateless :: tick_single_fsm ( shy_guts :: machine_amusement_performer_state ) ;
    so_called_common_engine_fsm_stateless :: tick_single_fsm ( shy_guts :: machine_game_performer_state ) ;
    so_called_common_engine_fsm_stateless :: tick_single_fsm ( shy_guts :: machine_generator_state ) ;
    so_called_common_engine_fsm_stateless :: tick_single_fsm ( shy_guts :: machine_main_menu_generator_state ) ;
    so_called_common_engine_fsm_stateless :: tick_single_fsm ( shy_guts :: machine_main_menu_performer_state ) ;
    so_called_common_engine_fsm_stateless :: tick_single_fsm ( shy_guts :: machine_performer_state ) ;
    so_called_common_engine_fsm_stateless :: tick_single_fsm ( shy_guts :: machine_salutation_cleaner_state ) ;
    so_called_common_engine_fsm_stateless :: tick_single_fsm ( shy_guts :: machine_salutation_generator_state ) ;
    so_called_common_engine_fsm_stateless :: tick_single_fsm ( shy_guts :: machine_salutation_performer_state ) ;
    so_called_common_engine_fsm_stateless :: tick_single_fsm ( shy_guts :: machine_text_generator_state ) ;
    so_called_common_engine_fsm_stateless :: tick_single_fsm ( shy_guts :: machine_title_generator_state ) ;
    so_called_common_engine_fsm_stateless :: tick_single_fsm ( shy_guts :: machine_title_performer_state ) ;
}

void so_called_common_logic_application_fsm_behaviour_static :: update_fixed_behaviour_inputs ( )
{
    shy_guts :: behaviour_inputs_fixed = shy_guts :: behaviour_inputs_current ;
}

// autogenerated file end
