template < typename mediator >
class shy_logic_application_fsm
{
    typedef typename mediator :: logic_application_stateless :: logic_application_stateless_consts_type logic_application_stateless_consts_type ;
    typedef typename mediator :: messages messages ;
    typedef typename mediator :: platform platform ;
    typedef typename mediator :: platform :: platform_conditions platform_conditions ;
    typedef typename mediator :: platform :: platform_math platform_math ;
    typedef typename mediator :: platform :: platform_math :: num_whole num_whole ;
    typedef typename mediator :: platform :: platform_math_consts platform_math_consts ;
    typedef typename mediator :: platform :: platform_pointer platform_pointer ;
    typedef shy_logic_application_fsm < mediator > logic_application_fsm ;
    typedef shy_logic_application_fsm < mediator > logic_application_fsm_autogenerated ;

    class _logic_application_fsm_states_type ;

    class _logic_application_fsm_autogenerated_inputs_type
    {
    public :
        num_whole machine_amusement_generator_command_start ;
        num_whole machine_amusement_generator_state_is_finished ;
        num_whole machine_amusement_performer_command_start ;
        num_whole machine_amusement_performer_state_is_finished ;
        num_whole machine_game_performer_command_start ;
        num_whole machine_main_menu_generator_command_start ;
        num_whole machine_main_menu_generator_state_is_finished ;
        num_whole machine_main_menu_performer_command_start ;
        num_whole machine_main_menu_performer_state_is_finished ;
        num_whole machine_text_generator_command_start ;
        num_whole machine_text_generator_state_is_finished ;
        num_whole machine_title_generator_command_start ;
        num_whole machine_title_generator_state_is_finished ;
        num_whole machine_title_performer_command_start ;
        num_whole machine_title_performer_state_is_finished ;
    } ;

    class _logic_application_fsm_inputs_type
    {
    public :
        num_whole logic_amusement_created ;
        num_whole logic_amusement_finished ;
        num_whole logic_application_render ;
        num_whole logic_application_update ;
        num_whole logic_text_prepared ;
        num_whole logic_title_created ;
        num_whole logic_title_finished ;
        num_whole logic_main_menu_created ;
        num_whole logic_main_menu_finished ;
        num_whole stage_amusement_disabled ;
        num_whole stage_amusement_enabled ;
        num_whole stage_main_menu_disabled ;
        num_whole stage_main_menu_enabled ;
        num_whole stage_title_disabled ;
        num_whole stage_title_enabled ;
    } ;

    class _logic_application_fsm_autogenerated_actions_type
    {
    public :
        void set_fsm ( typename platform_pointer :: template pointer < logic_application_fsm > ) ;

        void amusement_generator_command_start ( ) ;
        void amusement_performer_command_start ( ) ;
        void game_performer_command_start ( ) ;
        void main_menu_generator_command_start ( ) ;
        void main_menu_performer_command_start ( ) ;
        void text_generator_command_start ( ) ;
        void title_generator_command_start ( ) ;
        void title_performer_command_start ( ) ;
    private :
        typename platform_pointer :: template pointer < logic_application_fsm > _fsm ;
    } ;

    class _logic_application_fsm_actions_type
    {
    public :
        void set_fsm ( typename platform_pointer :: template pointer < logic_application_fsm > ) ;

        void logic_amusement_creation_permit ( ) ;
        void logic_amusement_launch_permit ( ) ;
        void logic_amusement_render ( ) ;
        void logic_amusement_update ( ) ;
        void logic_game_launch_permit ( ) ;
        void logic_game_render ( ) ;
        void logic_game_update ( ) ;
        void logic_main_menu_creation_permit ( ) ;
        void logic_main_menu_launch_permit ( ) ;
        void logic_main_menu_render ( ) ;
        void logic_main_menu_update ( ) ;
        void logic_text_prepare_permit ( ) ;
        void logic_text_update ( ) ;
        void logic_title_launch_permit ( ) ;
        void logic_title_render ( ) ;
        void logic_title_update ( ) ;
    private :
        typename platform_pointer :: template pointer < logic_application_fsm > _fsm ;
    } ;

    class _logic_application_fsm_state_environment_type
    {
    public :
        typename platform_pointer :: template pointer < _logic_application_fsm_autogenerated_actions_type > autogenerated_actions ;
        typename platform_pointer :: template pointer < _logic_application_fsm_actions_type > actions ;
        typename platform_pointer :: template pointer < _logic_application_fsm_states_type > states ;
        typename platform_pointer :: template pointer < _logic_application_fsm_autogenerated_inputs_type > autogenerated_inputs ;
        typename platform_pointer :: template pointer < _logic_application_fsm_inputs_type > inputs ;
    } ;

    class _logic_application_fsm_state_type
    {
    public :
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
        virtual void on_exit ( _logic_application_fsm_state_environment_type & ) ;
        virtual void on_input ( _logic_application_fsm_state_environment_type & ) ;
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ; 
    } ;

    //
    // performer
    //

    class _machine_performer_state_initial_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_performer_state_title_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_performer_state_main_menu_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_performer_state_amusement_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_performer_state_game_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    //
    // generator
    //

    class _machine_generator_state_initial_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_generator_state_text_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_generator_state_title_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_generator_state_main_menu_type
    : public _logic_application_fsm_state_type
    {
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_generator_state_amusement_type
    : public _logic_application_fsm_state_type
    {
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_generator_state_game_type
    : public _logic_application_fsm_state_type
    {
    } ;

    //
    // text_generator
    //

    class _machine_text_generator_state_initial_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_text_generator_state_generating_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
        virtual void on_input ( _logic_application_fsm_state_environment_type & ) ;
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_text_generator_state_finished_type
    : public _logic_application_fsm_state_type
    {
    } ;

    //
    // title_generator
    //

    class _machine_title_generator_state_initial_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_title_generator_state_generating_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
        virtual void on_input ( _logic_application_fsm_state_environment_type & ) ;
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_title_generator_state_finished_type
    : public _logic_application_fsm_state_type
    {
    } ;

    //
    // title_performer
    //

    class _machine_title_performer_state_initial_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_title_performer_state_performing_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual void on_input ( _logic_application_fsm_state_environment_type & ) ;
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_title_performer_state_finished_type
    : public _logic_application_fsm_state_type
    {
    } ;

    //
    // main_menu_generator
    //

    class _machine_main_menu_generator_state_initial_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_main_menu_generator_state_generating_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
        virtual void on_input ( _logic_application_fsm_state_environment_type & ) ;
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_main_menu_generator_state_finished_type
    : public _logic_application_fsm_state_type
    {
    } ;

    //
    // main_menu_performer
    //

    class _machine_main_menu_performer_state_initial_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_main_menu_performer_state_performing_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
        virtual void on_input ( _logic_application_fsm_state_environment_type & ) ;
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_main_menu_performer_state_finished_type
    : public _logic_application_fsm_state_type
    {
    } ;

    //
    // amusement_generator
    //

    class _machine_amusement_generator_state_initial_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_amusement_generator_state_generating_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
        virtual void on_input ( _logic_application_fsm_state_environment_type & ) ;
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_amusement_generator_state_finished_type
    : public _logic_application_fsm_state_type
    {
    } ;

    //
    // amusement_performer
    //

    class _machine_amusement_performer_state_initial_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_amusement_performer_state_performing_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
        virtual void on_input ( _logic_application_fsm_state_environment_type & ) ;
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_amusement_performer_state_finished_type
    : public _logic_application_fsm_state_type
    {
    } ;

    //
    // game_performer
    //

    class _machine_game_performer_state_initial_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_game_performer_state_performing_type
    : public _logic_application_fsm_state_type
    {
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
        virtual void on_input ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    //
    // all states
    //

    class _logic_application_fsm_states_type
    {
    public :
        _machine_amusement_generator_state_finished_type amusement_generator_state_finished ;
        _machine_amusement_generator_state_generating_type amusement_generator_state_generating ;
        _machine_amusement_generator_state_initial_type amusement_generator_state_initial ;
        _machine_amusement_performer_state_finished_type amusement_performer_state_finished ;
        _machine_amusement_performer_state_initial_type amusement_performer_state_initial ;
        _machine_amusement_performer_state_performing_type amusement_performer_state_performing ;
        _machine_game_performer_state_initial_type game_performer_state_initial ;
        _machine_game_performer_state_performing_type game_performer_state_performing ;
        _machine_generator_state_amusement_type generator_state_amusement ;
        _machine_generator_state_game_type generator_state_game ;
        _machine_generator_state_initial_type generator_state_initial ;
        _machine_generator_state_main_menu_type generator_state_main_menu ;
        _machine_generator_state_text_type generator_state_text ;
        _machine_generator_state_title_type generator_state_title ;
        _machine_main_menu_generator_state_finished_type main_menu_generator_state_finished ;
        _machine_main_menu_generator_state_generating_type main_menu_generator_state_generating ;
        _machine_main_menu_generator_state_initial_type main_menu_generator_state_initial ;
        _machine_main_menu_performer_state_finished_type main_menu_performer_state_finished ;
        _machine_main_menu_performer_state_initial_type main_menu_performer_state_initial ;
        _machine_main_menu_performer_state_performing_type main_menu_performer_state_performing ;
        _machine_performer_state_amusement_type performer_state_amusement ;
        _machine_performer_state_game_type performer_state_game ;
        _machine_performer_state_initial_type performer_state_initial ;
        _machine_performer_state_main_menu_type performer_state_main_menu ;
        _machine_performer_state_title_type performer_state_title ;
        _machine_text_generator_state_finished_type text_generator_state_finished ;
        _machine_text_generator_state_generating_type text_generator_state_generating ;
        _machine_text_generator_state_initial_type text_generator_state_initial ;
        _machine_title_generator_state_finished_type title_generator_state_finished ;
        _machine_title_generator_state_generating_type title_generator_state_generating ;
        _machine_title_generator_state_initial_type title_generator_state_initial ;
        _machine_title_performer_state_finished_type title_performer_state_finished ;
        _machine_title_performer_state_initial_type title_performer_state_initial ;
        _machine_title_performer_state_performing_type title_performer_state_performing ;
    } ;

public :
    void set_mediator ( typename platform_pointer :: template pointer < mediator > ) ;
    void receive ( typename messages :: init ) ;
    void receive ( typename messages :: logic_amusement_created ) ;
    void receive ( typename messages :: logic_amusement_finished ) ;
    void receive ( typename messages :: logic_application_render ) ;
    void receive ( typename messages :: logic_application_update ) ;
    void receive ( typename messages :: logic_text_prepared ) ;
    void receive ( typename messages :: logic_title_created ) ;
    void receive ( typename messages :: logic_title_finished ) ;
    void receive ( typename messages :: logic_main_menu_created ) ;
    void receive ( typename messages :: logic_main_menu_finished ) ;
public :
    void _reset_input_events ( ) ;
    void _reset_autogenerated_input_events ( ) ;
    void _recalc_current_inputs ( ) ;
    void _recalc_current_autogenerated_inputs ( ) ;
    void _determine_inputs_change ( num_whole & ) ;
    void _determine_autogenerated_inputs_change ( num_whole & ) ;
    void _update_fixed_inputs ( ) ;
    void _update_fixed_autogenerated_inputs ( ) ;
    void _tick_all_fsms ( _logic_application_fsm_state_environment_type & ) ;
    static void _run_fsm ( logic_application_fsm_autogenerated & , logic_application_fsm & ) ;
    static void _stabilize_fsm ( logic_application_fsm_autogenerated & , logic_application_fsm & ) ;
    static void _tick_single_fsm 
        ( _logic_application_fsm_state_environment_type & 
        , typename platform_pointer :: template pointer < _logic_application_fsm_state_type > & 
        ) ;
public :
    typename platform_pointer :: template pointer < mediator > _mediator ;
    typename platform_pointer :: template pointer < const platform_math_consts > _platform_math_consts ;
    typename platform_pointer :: template pointer < const logic_application_stateless_consts_type > _logic_application_stateless_consts ;

    typename platform_pointer :: template pointer < _logic_application_fsm_state_type > _machine_amusement_generator_state ;
    typename platform_pointer :: template pointer < _logic_application_fsm_state_type > _machine_amusement_performer_state ;
    typename platform_pointer :: template pointer < _logic_application_fsm_state_type > _machine_game_performer_state ;
    typename platform_pointer :: template pointer < _logic_application_fsm_state_type > _machine_generator_state ;
    typename platform_pointer :: template pointer < _logic_application_fsm_state_type > _machine_main_menu_generator_state ;
    typename platform_pointer :: template pointer < _logic_application_fsm_state_type > _machine_main_menu_performer_state ;
    typename platform_pointer :: template pointer < _logic_application_fsm_state_type > _machine_performer_state ;
    typename platform_pointer :: template pointer < _logic_application_fsm_state_type > _machine_text_generator_state ;
    typename platform_pointer :: template pointer < _logic_application_fsm_state_type > _machine_title_generator_state ;
    typename platform_pointer :: template pointer < _logic_application_fsm_state_type > _machine_title_performer_state ;

    _logic_application_fsm_autogenerated_actions_type _logic_application_fsm_autogenerated_actions ;
    _logic_application_fsm_actions_type _logic_application_fsm_actions ;
    _logic_application_fsm_states_type _logic_application_fsm_states ;
    _logic_application_fsm_state_environment_type _logic_application_fsm_state_environment ;

    num_whole _fsm_running ;
    _logic_application_fsm_autogenerated_inputs_type _current_autogenerated_inputs ;
    _logic_application_fsm_autogenerated_inputs_type _fixed_autogenerated_inputs ;
    _logic_application_fsm_inputs_type _current_inputs ;
    _logic_application_fsm_inputs_type _fixed_inputs ;
} ;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
typename shy_logic_application_fsm < mediator > :: _logic_application_fsm_state_type &
shy_logic_application_fsm < mediator > :: _machine_performer_state_initial_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    return env . states . get ( ) . performer_state_title ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _machine_performer_state_title_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . autogenerated_actions . get ( ) . title_performer_command_start ( ) ;
}

template < typename mediator >
typename shy_logic_application_fsm < mediator > :: _logic_application_fsm_state_type &
shy_logic_application_fsm < mediator > :: _machine_performer_state_title_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_title_performer_state_is_finished ) )
        return env . states . get ( ) . performer_state_main_menu ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _machine_performer_state_main_menu_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . autogenerated_actions . get ( ) . main_menu_performer_command_start ( ) ;
}

template < typename mediator >
typename shy_logic_application_fsm < mediator > :: _logic_application_fsm_state_type &
shy_logic_application_fsm < mediator > :: _machine_performer_state_main_menu_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_main_menu_performer_state_is_finished ) )
        return env . states . get ( ) . performer_state_amusement ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _machine_performer_state_amusement_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . autogenerated_actions . get ( ) . amusement_performer_command_start ( ) ;
}

template < typename mediator >
typename shy_logic_application_fsm < mediator > :: _logic_application_fsm_state_type &
shy_logic_application_fsm < mediator > :: _machine_performer_state_amusement_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_amusement_performer_state_is_finished ) )
        return env . states . get ( ) . performer_state_game ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _machine_performer_state_game_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . autogenerated_actions . get ( ) . game_performer_command_start ( ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
typename shy_logic_application_fsm < mediator > :: _logic_application_fsm_state_type &
shy_logic_application_fsm < mediator > :: _machine_generator_state_initial_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    return env . states . get ( ) . generator_state_text ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _machine_generator_state_text_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . autogenerated_actions . get ( ) . text_generator_command_start ( ) ;
}

template < typename mediator >
typename shy_logic_application_fsm < mediator > :: _logic_application_fsm_state_type &
shy_logic_application_fsm < mediator > :: _machine_generator_state_text_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_text_generator_state_is_finished ) )
        return env . states . get ( ) . generator_state_title ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _machine_generator_state_title_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . autogenerated_actions . get ( ) . title_generator_command_start ( ) ;
}

template < typename mediator >
typename shy_logic_application_fsm < mediator > :: _logic_application_fsm_state_type &
shy_logic_application_fsm < mediator > :: _machine_generator_state_title_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_title_generator_state_is_finished ) )
        return env . states . get ( ) . generator_state_main_menu ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _machine_generator_state_main_menu_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . autogenerated_actions . get ( ) . main_menu_generator_command_start ( ) ;
}

template < typename mediator >
typename shy_logic_application_fsm < mediator > :: _logic_application_fsm_state_type &
shy_logic_application_fsm < mediator > :: _machine_generator_state_main_menu_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_main_menu_generator_state_is_finished ) )
        return env . states . get ( ) . generator_state_amusement ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _machine_generator_state_amusement_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . autogenerated_actions . get ( ) . amusement_generator_command_start ( ) ;
}

template < typename mediator >
typename shy_logic_application_fsm < mediator > :: _logic_application_fsm_state_type &
shy_logic_application_fsm < mediator > :: _machine_generator_state_amusement_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_amusement_generator_state_is_finished ) )
        return env . states . get ( ) . generator_state_game ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
typename shy_logic_application_fsm < mediator > :: _logic_application_fsm_state_type &
shy_logic_application_fsm < mediator > :: _machine_text_generator_state_initial_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_text_generator_command_start ) )
        return env . states . get ( ) . text_generator_state_generating ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _machine_text_generator_state_generating_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . actions . get ( ) . logic_text_prepare_permit ( ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _machine_text_generator_state_generating_type :: on_input ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_update ) )
        env . actions . get ( ) . logic_text_update ( ) ;
}

template < typename mediator >
typename shy_logic_application_fsm < mediator > :: _logic_application_fsm_state_type &
shy_logic_application_fsm < mediator > :: _machine_text_generator_state_generating_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_text_prepared ) )
        return env . states . get ( ) . text_generator_state_finished ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
typename shy_logic_application_fsm < mediator > :: _logic_application_fsm_state_type &
shy_logic_application_fsm < mediator > :: _machine_title_generator_state_initial_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_title_generator_command_start )
      && platform_conditions :: whole_is_true ( env . inputs . get ( ) . stage_title_enabled )
       )
    {
        return env . states . get ( ) . title_generator_state_generating ;
    }
    else if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_title_generator_command_start )
           && platform_conditions :: whole_is_true ( env . inputs . get ( ) . stage_title_disabled )
            )
    {
        return env . states . get ( ) . title_generator_state_finished ;
    }
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _machine_title_generator_state_generating_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . actions . get ( ) . logic_title_launch_permit ( ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _machine_title_generator_state_generating_type :: on_input ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_update ) )
        env . actions . get ( ) . logic_title_update ( ) ;
}

template < typename mediator >
typename shy_logic_application_fsm < mediator > :: _logic_application_fsm_state_type &
shy_logic_application_fsm < mediator > :: _machine_title_generator_state_generating_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_title_created ) )
        return env . states . get ( ) . title_generator_state_finished ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
typename shy_logic_application_fsm < mediator > :: _logic_application_fsm_state_type &
shy_logic_application_fsm < mediator > :: _machine_title_performer_state_initial_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_title_performer_command_start )
      && platform_conditions :: whole_is_true ( env . inputs . get ( ) . stage_title_enabled )
       )
    {
        return env . states . get ( ) . title_performer_state_performing ;
    }
    else if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_title_performer_command_start )
           && platform_conditions :: whole_is_true ( env . inputs . get ( ) . stage_title_disabled )
            )
    {
        return env . states . get ( ) . title_performer_state_finished ;
    }
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _machine_title_performer_state_performing_type :: on_input ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_render ) )
        env . actions . get ( ) . logic_title_render ( ) ;
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_update ) )
        env . actions . get ( ) . logic_title_update ( ) ;
}

template < typename mediator >
typename shy_logic_application_fsm < mediator > :: _logic_application_fsm_state_type &
shy_logic_application_fsm < mediator > :: _machine_title_performer_state_performing_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_title_finished ) )
        return env . states . get ( ) . title_performer_state_finished ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
typename shy_logic_application_fsm < mediator > :: _logic_application_fsm_state_type &
shy_logic_application_fsm < mediator > :: _machine_main_menu_generator_state_initial_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_main_menu_generator_command_start )
      && platform_conditions :: whole_is_true ( env . inputs . get ( ) . stage_main_menu_enabled )
       )
    {
        return env . states . get ( ) . main_menu_generator_state_generating ;
    }
    else if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_main_menu_generator_command_start )
           && platform_conditions :: whole_is_true ( env . inputs . get ( ) . stage_main_menu_disabled )
            )
    {
        return env . states . get ( ) . main_menu_generator_state_finished ;
    }
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _machine_main_menu_generator_state_generating_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . actions . get ( ) . logic_main_menu_creation_permit ( ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _machine_main_menu_generator_state_generating_type :: on_input ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_update ) )
        env . actions . get ( ) . logic_main_menu_update ( ) ;
}

template < typename mediator >
typename shy_logic_application_fsm < mediator > :: _logic_application_fsm_state_type &
shy_logic_application_fsm < mediator > :: _machine_main_menu_generator_state_generating_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_main_menu_created ) )
        return env . states . get ( ) . main_menu_generator_state_finished ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
typename shy_logic_application_fsm < mediator > :: _logic_application_fsm_state_type &
shy_logic_application_fsm < mediator > :: _machine_main_menu_performer_state_initial_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_main_menu_performer_command_start )
      && platform_conditions :: whole_is_true ( env . inputs . get ( ) . stage_main_menu_enabled )
       )
    {
        return env . states . get ( ) . main_menu_performer_state_performing ;
    }
    else if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_main_menu_performer_command_start )
           && platform_conditions :: whole_is_true ( env . inputs . get ( ) . stage_main_menu_disabled )
            )
    {
        return env . states . get ( ) . main_menu_performer_state_finished ;
    }
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _machine_main_menu_performer_state_performing_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . actions . get ( ) . logic_main_menu_launch_permit ( ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _machine_main_menu_performer_state_performing_type :: on_input ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_render ) )
        env . actions . get ( ) . logic_main_menu_render ( ) ;
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_update ) )
        env . actions . get ( ) . logic_main_menu_update ( ) ;
}

template < typename mediator >
typename shy_logic_application_fsm < mediator > :: _logic_application_fsm_state_type &
shy_logic_application_fsm < mediator > :: _machine_main_menu_performer_state_performing_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_main_menu_finished ) )
        return env . states . get ( ) . main_menu_performer_state_finished ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
typename shy_logic_application_fsm < mediator > :: _logic_application_fsm_state_type &
shy_logic_application_fsm < mediator > :: _machine_amusement_generator_state_initial_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_amusement_generator_command_start ) 
      && platform_conditions :: whole_is_true ( env . inputs . get ( ) . stage_amusement_enabled )
       )
    {
        return env . states . get ( ) . amusement_generator_state_generating ;
    }
    else if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_amusement_generator_command_start ) 
           && platform_conditions :: whole_is_true ( env . inputs . get ( ) . stage_amusement_disabled )
            )
    {
        return env . states . get ( ) . amusement_generator_state_finished ;
    }
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _machine_amusement_generator_state_generating_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . actions . get ( ) . logic_amusement_creation_permit ( ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _machine_amusement_generator_state_generating_type :: on_input ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_update ) )
        env . actions . get ( ) . logic_amusement_update ( ) ;
}

template < typename mediator >
typename shy_logic_application_fsm < mediator > :: _logic_application_fsm_state_type &
shy_logic_application_fsm < mediator > :: _machine_amusement_generator_state_generating_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_amusement_created ) )
        return env . states . get ( ) . amusement_generator_state_finished ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
typename shy_logic_application_fsm < mediator > :: _logic_application_fsm_state_type &
shy_logic_application_fsm < mediator > :: _machine_amusement_performer_state_initial_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_amusement_performer_command_start )
      && platform_conditions :: whole_is_true ( env . inputs . get ( ) . stage_amusement_enabled )
       )
    {
        return env . states . get ( ) . amusement_performer_state_performing ;
    }
    else if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_amusement_performer_command_start )
           && platform_conditions :: whole_is_true ( env . inputs . get ( ) . stage_amusement_disabled )
            )
    {
        return env . states . get ( ) . amusement_performer_state_finished ;
    }
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _machine_amusement_performer_state_performing_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . actions . get ( ) . logic_amusement_launch_permit ( ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _machine_amusement_performer_state_performing_type :: on_input ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_render ) )
        env . actions . get ( ) . logic_amusement_render ( ) ;
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_update ) )
        env . actions . get ( ) . logic_amusement_update ( ) ;
}

template < typename mediator >
typename shy_logic_application_fsm < mediator > :: _logic_application_fsm_state_type &
shy_logic_application_fsm < mediator > :: _machine_amusement_performer_state_performing_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_amusement_finished ) )
        return env . states . get ( ) . amusement_performer_state_finished ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
typename shy_logic_application_fsm < mediator > :: _logic_application_fsm_state_type &
shy_logic_application_fsm < mediator > :: _machine_game_performer_state_initial_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_game_performer_command_start ) )
        return env . states . get ( ) . game_performer_state_performing ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _machine_game_performer_state_performing_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . actions . get ( ) . logic_game_launch_permit ( ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _machine_game_performer_state_performing_type :: on_input ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_render ) )
        env . actions . get ( ) . logic_game_render ( ) ;
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_update ) )
        env . actions . get ( ) . logic_game_update ( ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _logic_application_fsm_autogenerated_actions_type :: set_fsm ( typename platform_pointer :: template pointer < logic_application_fsm > arg_fsm )
{
    _fsm = arg_fsm ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _logic_application_fsm_autogenerated_actions_type :: amusement_generator_command_start ( )
{
    platform_math :: make_num_whole ( _fsm . get ( ) . _current_autogenerated_inputs . machine_amusement_generator_command_start , true ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _logic_application_fsm_autogenerated_actions_type :: amusement_performer_command_start ( )
{
    platform_math :: make_num_whole ( _fsm . get ( ) . _current_autogenerated_inputs . machine_amusement_performer_command_start , true ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _logic_application_fsm_autogenerated_actions_type :: game_performer_command_start ( )
{
    platform_math :: make_num_whole ( _fsm . get ( ) . _current_autogenerated_inputs . machine_game_performer_command_start , true ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _logic_application_fsm_autogenerated_actions_type :: main_menu_generator_command_start ( )
{
    platform_math :: make_num_whole ( _fsm . get ( ) . _current_autogenerated_inputs . machine_main_menu_generator_command_start , true ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _logic_application_fsm_autogenerated_actions_type :: main_menu_performer_command_start ( )
{
    platform_math :: make_num_whole ( _fsm . get ( ) . _current_autogenerated_inputs . machine_main_menu_performer_command_start , true ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _logic_application_fsm_autogenerated_actions_type :: text_generator_command_start ( )
{
    platform_math :: make_num_whole ( _fsm . get ( ) . _current_autogenerated_inputs . machine_text_generator_command_start , true ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _logic_application_fsm_autogenerated_actions_type :: title_generator_command_start ( )
{
    platform_math :: make_num_whole ( _fsm . get ( ) . _current_autogenerated_inputs . machine_title_generator_command_start , true ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _logic_application_fsm_autogenerated_actions_type :: title_performer_command_start ( )
{
    platform_math :: make_num_whole ( _fsm . get ( ) . _current_autogenerated_inputs . machine_title_performer_command_start , true ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _logic_application_fsm_actions_type :: set_fsm ( typename platform_pointer :: template pointer < logic_application_fsm > arg_fsm )
{
    _fsm = arg_fsm ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _logic_application_fsm_actions_type :: logic_amusement_creation_permit ( )
{
    _fsm . get ( ) . _mediator . get ( ) . send ( typename messages :: logic_amusement_creation_permit ( ) ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _logic_application_fsm_actions_type :: logic_amusement_launch_permit ( )
{
    _fsm . get ( ) . _mediator . get ( ) . send ( typename messages :: logic_amusement_launch_permit ( ) ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _logic_application_fsm_actions_type :: logic_amusement_render ( )
{
    _fsm . get ( ) . _mediator . get ( ) . send ( typename messages :: logic_amusement_render ( ) ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _logic_application_fsm_actions_type :: logic_amusement_update ( )
{
    _fsm . get ( ) . _mediator . get ( ) . send ( typename messages :: logic_amusement_update ( ) ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _logic_application_fsm_actions_type :: logic_game_launch_permit ( )
{
    _fsm . get ( ) . _mediator . get ( ) . send ( typename messages :: logic_game_launch_permit ( ) ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _logic_application_fsm_actions_type :: logic_game_render ( )
{
    _fsm . get ( ) . _mediator . get ( ) . send ( typename messages :: logic_game_render ( ) ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _logic_application_fsm_actions_type :: logic_game_update ( )
{
    _fsm . get ( ) . _mediator . get ( ) . send ( typename messages :: logic_game_update ( ) ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _logic_application_fsm_actions_type :: logic_main_menu_creation_permit ( )
{
    _fsm . get ( ) . _mediator . get ( ) . send ( typename messages :: logic_main_menu_creation_permit ( ) ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _logic_application_fsm_actions_type :: logic_main_menu_launch_permit ( )
{
    _fsm . get ( ) . _mediator . get ( ) . send ( typename messages :: logic_main_menu_launch_permit ( ) ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _logic_application_fsm_actions_type :: logic_main_menu_render ( )
{
    _fsm . get ( ) . _mediator . get ( ) . send ( typename messages :: logic_main_menu_render ( ) ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _logic_application_fsm_actions_type :: logic_main_menu_update ( )
{
    _fsm . get ( ) . _mediator . get ( ) . send ( typename messages :: logic_main_menu_update ( ) ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _logic_application_fsm_actions_type :: logic_text_prepare_permit ( )
{
    _fsm . get ( ) . _mediator . get ( ) . send ( typename messages :: logic_text_prepare_permit ( ) ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _logic_application_fsm_actions_type :: logic_text_update ( )
{
    _fsm . get ( ) . _mediator . get ( ) . send ( typename messages :: logic_text_update ( ) ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _logic_application_fsm_actions_type :: logic_title_launch_permit ( )
{
    _fsm . get ( ) . _mediator . get ( ) . send ( typename messages :: logic_title_launch_permit ( ) ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _logic_application_fsm_actions_type :: logic_title_render ( )
{
    _fsm . get ( ) . _mediator . get ( ) . send ( typename messages :: logic_title_render ( ) ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _logic_application_fsm_actions_type :: logic_title_update ( )
{
    _fsm . get ( ) . _mediator . get ( ) . send ( typename messages :: logic_title_update ( ) ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _logic_application_fsm_state_type :: on_entry ( _logic_application_fsm_state_environment_type & )
{
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _logic_application_fsm_state_type :: on_exit ( _logic_application_fsm_state_environment_type & )
{
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _logic_application_fsm_state_type :: on_input ( _logic_application_fsm_state_environment_type & )
{
}

template < typename mediator >
typename shy_logic_application_fsm < mediator > :: _logic_application_fsm_state_type &
shy_logic_application_fsm < mediator > :: _logic_application_fsm_state_type :: transition ( _logic_application_fsm_state_environment_type & )
{
    return * this ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename mediator >
void shy_logic_application_fsm < mediator > :: set_mediator ( typename platform_pointer :: template pointer < mediator > arg_mediator )
{
    _mediator = arg_mediator ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: receive ( typename messages :: init )
{
    typename platform_pointer :: template pointer < const platform > platform_obj ;
    _mediator . get ( ) . logic_application_stateless_consts ( _logic_application_stateless_consts ) ;
    _mediator . get ( ) . platform_obj ( platform_obj ) ;
    _platform_math_consts = platform_obj . get ( ) . math_consts ;

    _fsm_running = _platform_math_consts . get ( ) . whole_false ;

    typename platform_pointer :: template pointer < logic_application_fsm > fsm ;
    platform_pointer :: bind ( fsm , * this ) ;
    _logic_application_fsm_autogenerated_actions . set_fsm ( fsm ) ;
    _logic_application_fsm_actions . set_fsm ( fsm ) ;

    platform_pointer :: bind ( _logic_application_fsm_state_environment . autogenerated_actions , _logic_application_fsm_autogenerated_actions ) ;
    platform_pointer :: bind ( _logic_application_fsm_state_environment . actions , _logic_application_fsm_actions ) ;
    platform_pointer :: bind ( _logic_application_fsm_state_environment . states , _logic_application_fsm_states ) ;
    platform_pointer :: bind ( _logic_application_fsm_state_environment . autogenerated_inputs , _fixed_autogenerated_inputs ) ;
    platform_pointer :: bind ( _logic_application_fsm_state_environment . inputs , _fixed_inputs ) ;

    platform_pointer :: bind ( _machine_amusement_generator_state , _logic_application_fsm_states . amusement_generator_state_initial ) ;
    platform_pointer :: bind ( _machine_amusement_performer_state , _logic_application_fsm_states . amusement_performer_state_initial ) ;
    platform_pointer :: bind ( _machine_game_performer_state , _logic_application_fsm_states . game_performer_state_initial ) ;
    platform_pointer :: bind ( _machine_generator_state , _logic_application_fsm_states . generator_state_initial ) ;
    platform_pointer :: bind ( _machine_main_menu_generator_state , _logic_application_fsm_states . main_menu_generator_state_initial ) ;
    platform_pointer :: bind ( _machine_main_menu_performer_state , _logic_application_fsm_states . main_menu_performer_state_initial ) ;
    platform_pointer :: bind ( _machine_performer_state , _logic_application_fsm_states . performer_state_initial ) ;
    platform_pointer :: bind ( _machine_text_generator_state , _logic_application_fsm_states . text_generator_state_initial ) ;
    platform_pointer :: bind ( _machine_title_generator_state , _logic_application_fsm_states . title_generator_state_initial ) ;
    platform_pointer :: bind ( _machine_title_performer_state , _logic_application_fsm_states . title_performer_state_initial ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: receive ( typename messages :: logic_amusement_created )
{
    _current_inputs . logic_amusement_created = _platform_math_consts . get ( ) . whole_true ;
    _run_fsm ( * this , * this ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: receive ( typename messages :: logic_amusement_finished )
{
    _current_inputs . logic_amusement_finished = _platform_math_consts . get ( ) . whole_true ;
    _run_fsm ( * this , * this ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: receive ( typename messages :: logic_application_render )
{
    _current_inputs . logic_application_render = _platform_math_consts . get ( ) . whole_true ;
    _run_fsm ( * this , * this ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: receive ( typename messages :: logic_application_update )
{
    _current_inputs . logic_application_update = _platform_math_consts . get ( ) . whole_true ;
    _run_fsm ( * this , * this ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: receive ( typename messages :: logic_text_prepared )
{
    _current_inputs . logic_text_prepared = _platform_math_consts . get ( ) . whole_true ;
    _run_fsm ( * this , * this ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: receive ( typename messages :: logic_title_created )
{
    _current_inputs . logic_title_created = _platform_math_consts . get ( ) . whole_true ;
    _run_fsm ( * this , * this ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: receive ( typename messages :: logic_title_finished )
{
    _current_inputs . logic_title_finished = _platform_math_consts . get ( ) . whole_true ;
    _run_fsm ( * this , * this ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: receive ( typename messages :: logic_main_menu_created )
{
    _current_inputs . logic_main_menu_created = _platform_math_consts . get ( ) . whole_true ;
    _run_fsm ( * this , * this ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: receive ( typename messages :: logic_main_menu_finished )
{
    _current_inputs . logic_main_menu_finished = _platform_math_consts . get ( ) . whole_true ;
    _run_fsm ( * this , * this ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _reset_input_events ( )
{
    _current_inputs . logic_amusement_created = _platform_math_consts . get ( ) . whole_false ;
    _current_inputs . logic_amusement_finished = _platform_math_consts . get ( ) . whole_false ;
    _current_inputs . logic_application_render = _platform_math_consts . get ( ) . whole_false ;
    _current_inputs . logic_application_update = _platform_math_consts . get ( ) . whole_false ;
    _current_inputs . logic_main_menu_created = _platform_math_consts . get ( ) . whole_false ;
    _current_inputs . logic_main_menu_finished = _platform_math_consts . get ( ) . whole_false ;
    _current_inputs . logic_text_prepared = _platform_math_consts . get ( ) . whole_false ;
    _current_inputs . logic_title_created = _platform_math_consts . get ( ) . whole_false ;
    _current_inputs . logic_title_finished = _platform_math_consts . get ( ) . whole_false ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _reset_autogenerated_input_events ( )
{
    _current_autogenerated_inputs . machine_amusement_generator_command_start = _platform_math_consts . get ( ) . whole_false ;
    _current_autogenerated_inputs . machine_amusement_performer_command_start = _platform_math_consts . get ( ) . whole_false ;
    _current_autogenerated_inputs . machine_game_performer_command_start = _platform_math_consts . get ( ) . whole_false ;
    _current_autogenerated_inputs . machine_main_menu_generator_command_start = _platform_math_consts . get ( ) . whole_false ;
    _current_autogenerated_inputs . machine_main_menu_performer_command_start = _platform_math_consts . get ( ) . whole_false ;
    _current_autogenerated_inputs . machine_text_generator_command_start = _platform_math_consts . get ( ) . whole_false ;
    _current_autogenerated_inputs . machine_title_generator_command_start = _platform_math_consts . get ( ) . whole_false ;
    _current_autogenerated_inputs . machine_title_performer_command_start = _platform_math_consts . get ( ) . whole_false ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _determine_inputs_change ( num_whole & inputs_changed )
{
    if ( platform_conditions :: wholes_are_equal ( _current_inputs . logic_amusement_created , _fixed_inputs . logic_amusement_created )
      && platform_conditions :: wholes_are_equal ( _current_inputs . logic_amusement_finished , _fixed_inputs . logic_amusement_finished )
      && platform_conditions :: wholes_are_equal ( _current_inputs . logic_application_render , _fixed_inputs . logic_application_render )
      && platform_conditions :: wholes_are_equal ( _current_inputs . logic_application_update , _fixed_inputs . logic_application_update )
      && platform_conditions :: wholes_are_equal ( _current_inputs . logic_main_menu_created , _fixed_inputs . logic_main_menu_created )
      && platform_conditions :: wholes_are_equal ( _current_inputs . logic_main_menu_finished , _fixed_inputs . logic_main_menu_finished )
      && platform_conditions :: wholes_are_equal ( _current_inputs . logic_text_prepared , _fixed_inputs . logic_text_prepared )
      && platform_conditions :: wholes_are_equal ( _current_inputs . logic_title_created , _fixed_inputs . logic_title_created )
      && platform_conditions :: wholes_are_equal ( _current_inputs . logic_title_finished , _fixed_inputs . logic_title_finished )
      && platform_conditions :: wholes_are_equal ( _current_inputs . stage_amusement_disabled , _fixed_inputs . stage_amusement_disabled )
      && platform_conditions :: wholes_are_equal ( _current_inputs . stage_amusement_enabled , _fixed_inputs . stage_amusement_enabled )
      && platform_conditions :: wholes_are_equal ( _current_inputs . stage_main_menu_disabled , _fixed_inputs . stage_main_menu_disabled )
      && platform_conditions :: wholes_are_equal ( _current_inputs . stage_main_menu_enabled , _fixed_inputs . stage_main_menu_enabled )
      && platform_conditions :: wholes_are_equal ( _current_inputs . stage_title_disabled , _fixed_inputs . stage_title_disabled )
      && platform_conditions :: wholes_are_equal ( _current_inputs . stage_title_enabled , _fixed_inputs . stage_title_enabled )
       )
    {
        inputs_changed = _platform_math_consts . get ( ) . whole_false ;
    }
    else
        inputs_changed = _platform_math_consts . get ( ) . whole_true ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _determine_autogenerated_inputs_change ( num_whole & inputs_changed )
{
    if ( platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_amusement_generator_command_start , _fixed_autogenerated_inputs . machine_amusement_generator_command_start )
      && platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_amusement_generator_state_is_finished , _fixed_autogenerated_inputs . machine_amusement_generator_state_is_finished )
      && platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_amusement_performer_command_start , _fixed_autogenerated_inputs . machine_amusement_performer_command_start )
      && platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_amusement_performer_state_is_finished , _fixed_autogenerated_inputs . machine_amusement_performer_state_is_finished )
      && platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_game_performer_command_start , _fixed_autogenerated_inputs . machine_game_performer_command_start )
      && platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_main_menu_generator_command_start , _fixed_autogenerated_inputs . machine_main_menu_generator_command_start )
      && platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_main_menu_generator_state_is_finished , _fixed_autogenerated_inputs . machine_main_menu_generator_state_is_finished )
      && platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_main_menu_performer_command_start , _fixed_autogenerated_inputs . machine_main_menu_performer_command_start )
      && platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_main_menu_performer_state_is_finished , _fixed_autogenerated_inputs . machine_main_menu_performer_state_is_finished )
      && platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_text_generator_command_start , _fixed_autogenerated_inputs . machine_text_generator_command_start )
      && platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_text_generator_state_is_finished , _fixed_autogenerated_inputs . machine_text_generator_state_is_finished )
      && platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_title_generator_command_start , _fixed_autogenerated_inputs . machine_title_generator_command_start )
      && platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_title_generator_state_is_finished , _fixed_autogenerated_inputs . machine_title_generator_state_is_finished )
      && platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_title_performer_command_start , _fixed_autogenerated_inputs . machine_title_performer_command_start )
      && platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_title_performer_state_is_finished , _fixed_autogenerated_inputs . machine_title_performer_state_is_finished )
       )
    {
        inputs_changed = _platform_math_consts . get ( ) . whole_false ;
    }
    else
        inputs_changed = _platform_math_consts . get ( ) . whole_true ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _recalc_current_inputs ( )
{
    if ( platform_conditions :: whole_is_true ( _logic_application_stateless_consts . get ( ) . skip_amusement ) )
    {
        _current_inputs . stage_amusement_disabled = _platform_math_consts . get ( ) . whole_true ;
        _current_inputs . stage_amusement_enabled = _platform_math_consts . get ( ) . whole_false ;
    }
    else
    {
        _current_inputs . stage_amusement_disabled = _platform_math_consts . get ( ) . whole_false ;
        _current_inputs . stage_amusement_enabled = _platform_math_consts . get ( ) . whole_true ;
    }
    if ( platform_conditions :: whole_is_true ( _logic_application_stateless_consts . get ( ) . skip_main_menu ) )
    {
        _current_inputs . stage_main_menu_disabled = _platform_math_consts . get ( ) . whole_true ;
        _current_inputs . stage_main_menu_enabled = _platform_math_consts . get ( ) . whole_false ;
    }
    else
    {
        _current_inputs . stage_main_menu_disabled = _platform_math_consts . get ( ) . whole_false ;
        _current_inputs . stage_main_menu_enabled = _platform_math_consts . get ( ) . whole_true ;
    }
    if ( platform_conditions :: whole_is_true ( _logic_application_stateless_consts . get ( ) . skip_title ) )
    {
        _current_inputs . stage_title_disabled = _platform_math_consts . get ( ) . whole_true ;
        _current_inputs . stage_title_enabled = _platform_math_consts . get ( ) . whole_false ;
    }
    else
    {
        _current_inputs . stage_title_disabled = _platform_math_consts . get ( ) . whole_false ;
        _current_inputs . stage_title_enabled = _platform_math_consts . get ( ) . whole_true ;
    }
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _recalc_current_autogenerated_inputs ( )
{
    platform_pointer :: is_bound_to ( _current_autogenerated_inputs . machine_amusement_generator_state_is_finished , _machine_amusement_generator_state , _logic_application_fsm_states . amusement_generator_state_finished ) ;
    platform_pointer :: is_bound_to ( _current_autogenerated_inputs . machine_amusement_performer_state_is_finished , _machine_amusement_performer_state , _logic_application_fsm_states . amusement_performer_state_finished ) ;
    platform_pointer :: is_bound_to ( _current_autogenerated_inputs . machine_main_menu_generator_state_is_finished , _machine_main_menu_generator_state , _logic_application_fsm_states . main_menu_generator_state_finished ) ;
    platform_pointer :: is_bound_to ( _current_autogenerated_inputs . machine_main_menu_performer_state_is_finished , _machine_main_menu_performer_state , _logic_application_fsm_states . main_menu_performer_state_finished ) ;
    platform_pointer :: is_bound_to ( _current_autogenerated_inputs . machine_text_generator_state_is_finished , _machine_text_generator_state , _logic_application_fsm_states . text_generator_state_finished ) ;
    platform_pointer :: is_bound_to ( _current_autogenerated_inputs . machine_title_generator_state_is_finished , _machine_title_generator_state , _logic_application_fsm_states . title_generator_state_finished ) ;
    platform_pointer :: is_bound_to ( _current_autogenerated_inputs . machine_title_performer_state_is_finished , _machine_title_performer_state , _logic_application_fsm_states . title_performer_state_finished ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _update_fixed_inputs ( )
{
    _fixed_inputs = _current_inputs ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _update_fixed_autogenerated_inputs ( )
{
    _fixed_autogenerated_inputs = _current_autogenerated_inputs ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _run_fsm ( logic_application_fsm & fsm , logic_application_fsm_autogenerated & fsm_autogenerated )
{
    if ( platform_conditions :: whole_is_false ( fsm . _fsm_running ) )
    {
        platform_math :: make_num_whole ( fsm . _fsm_running , true ) ;
        _stabilize_fsm ( fsm , fsm_autogenerated ) ;
        fsm_autogenerated . _reset_autogenerated_input_events ( ) ;
        fsm . _reset_input_events ( ) ;
        _stabilize_fsm ( fsm , fsm_autogenerated ) ;
        platform_math :: make_num_whole ( fsm . _fsm_running , false ) ;
    }
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _stabilize_fsm ( logic_application_fsm & fsm , logic_application_fsm_autogenerated & fsm_autogenerated )
{
    num_whole autogenerated_inputs_changed ;
    num_whole inputs_changed ;
    for ( ; ; )
    {
        fsm_autogenerated . _recalc_current_autogenerated_inputs ( ) ;
        fsm . _recalc_current_inputs ( ) ;
        fsm_autogenerated . _determine_autogenerated_inputs_change ( autogenerated_inputs_changed ) ;
        fsm . _determine_inputs_change ( inputs_changed ) ;
        if ( platform_conditions :: whole_is_true ( autogenerated_inputs_changed )
          || platform_conditions :: whole_is_true ( inputs_changed )
           )
        {
            fsm_autogenerated . _update_fixed_autogenerated_inputs ( ) ;
            fsm . _update_fixed_inputs ( ) ;
            fsm_autogenerated . _tick_all_fsms ( fsm . _logic_application_fsm_state_environment ) ;
        }
        else
            break ;
    }
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _tick_all_fsms ( _logic_application_fsm_state_environment_type & env )
{
    _tick_single_fsm ( env , _machine_amusement_generator_state ) ;
    _tick_single_fsm ( env , _machine_amusement_performer_state ) ;
    _tick_single_fsm ( env , _machine_game_performer_state ) ;
    _tick_single_fsm ( env , _machine_generator_state ) ;
    _tick_single_fsm ( env , _machine_main_menu_generator_state ) ;
    _tick_single_fsm ( env , _machine_main_menu_performer_state ) ;
    _tick_single_fsm ( env , _machine_performer_state ) ;
    _tick_single_fsm ( env , _machine_text_generator_state ) ;
    _tick_single_fsm ( env , _machine_title_generator_state ) ;
    _tick_single_fsm ( env , _machine_title_performer_state ) ;
}

template < typename mediator >
void shy_logic_application_fsm < mediator > :: _tick_single_fsm 
( _logic_application_fsm_state_environment_type & env
, typename platform_pointer :: template pointer < _logic_application_fsm_state_type > & state
)
{
    typename platform_pointer :: template pointer < _logic_application_fsm_state_type > next_state ;
    num_whole states_are_equal ;

    state . get ( ) . on_input ( env ) ;
    for ( ; ; )
    {
        platform_pointer :: bind ( next_state , state . get ( ) . transition ( env ) ) ;
        platform_pointer :: are_equal ( states_are_equal , state , next_state ) ;
        if ( platform_conditions :: whole_is_true ( states_are_equal ) )
            break ;
        else
        {
            state . get ( ) . on_exit ( env ) ;
            state = next_state ;
            state . get ( ) . on_entry ( env ) ;
        }
    }
}

