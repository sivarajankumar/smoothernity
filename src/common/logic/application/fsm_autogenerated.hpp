template < typename logic_application_fsm >
class shy_logic_application_fsm_autogenerated
{
    typedef typename logic_application_fsm :: mediator_type :: engine_fsm engine_fsm ;
    typedef typename logic_application_fsm :: mediator_type :: platform :: platform_conditions platform_conditions ;
    typedef typename logic_application_fsm :: mediator_type :: platform :: platform_math platform_math ;
    typedef typename logic_application_fsm :: mediator_type :: platform :: platform_math :: num_whole num_whole ;
    typedef typename logic_application_fsm :: mediator_type :: platform :: platform_pointer platform_pointer ;
    typedef typename logic_application_fsm :: logic_application_fsm_actions_type logic_application_fsm_actions_type ;
    typedef typename logic_application_fsm :: logic_application_fsm_inputs_type logic_application_fsm_inputs_type ;
    typedef shy_logic_application_fsm_autogenerated < logic_application_fsm > logic_application_fsm_autogenerated ;

    class _logic_application_fsm_states_type ;

    class _logic_application_fsm_autogenerated_inputs_type
    {
    public :
        num_whole machine_amusement_generator_command_start ;
        num_whole machine_amusement_generator_state_is_finished ;
        num_whole machine_amusement_performer_command_start ;
        num_whole machine_amusement_performer_state_is_finished ;
        num_whole machine_game_performer_command_start ;
        num_whole machine_main_menu_generator_command_start ;
        num_whole machine_main_menu_generator_state_is_finished ;
        num_whole machine_main_menu_performer_command_start ;
        num_whole machine_main_menu_performer_state_is_finished ;
        num_whole machine_text_generator_command_start ;
        num_whole machine_text_generator_state_is_finished ;
        num_whole machine_title_generator_command_start ;
        num_whole machine_title_generator_state_is_finished ;
        num_whole machine_title_performer_command_start ;
        num_whole machine_title_performer_state_is_finished ;
    } ;

    class _logic_application_fsm_autogenerated_actions_type
    {
    public :
        void set_fsm ( typename platform_pointer :: template pointer < logic_application_fsm_autogenerated > ) ;

        void amusement_generator_command_start ( ) ;
        void amusement_performer_command_start ( ) ;
        void game_performer_command_start ( ) ;
        void main_menu_generator_command_start ( ) ;
        void main_menu_performer_command_start ( ) ;
        void text_generator_command_start ( ) ;
        void title_generator_command_start ( ) ;
        void title_performer_command_start ( ) ;
    private :
        typename platform_pointer :: template pointer < logic_application_fsm_autogenerated > _fsm ;
    } ;

    class _logic_application_fsm_state_environment_type
    {
    public :
        typename platform_pointer :: template pointer < _logic_application_fsm_autogenerated_actions_type > autogenerated_actions ;
        typename platform_pointer :: template pointer < logic_application_fsm_actions_type > actions ;
        typename platform_pointer :: template pointer < _logic_application_fsm_states_type > states ;
        typename platform_pointer :: template pointer < _logic_application_fsm_autogenerated_inputs_type > autogenerated_inputs ;
        typename platform_pointer :: template pointer < logic_application_fsm_inputs_type > inputs ;
    } ;

    typedef typename engine_fsm :: template fsm_state_type < _logic_application_fsm_state_environment_type > _logic_application_fsm_state_type ;

    //
    // performer
    //

    class _machine_performer_state_initial_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_performer_state_title_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_performer_state_main_menu_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_performer_state_amusement_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_performer_state_game_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    //
    // generator
    //

    class _machine_generator_state_initial_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_generator_state_text_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_generator_state_title_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_generator_state_main_menu_type
    : public _logic_application_fsm_state_type
    {
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_generator_state_amusement_type
    : public _logic_application_fsm_state_type
    {
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_generator_state_game_type
    : public _logic_application_fsm_state_type
    {
    } ;

    //
    // text_generator
    //

    class _machine_text_generator_state_initial_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_text_generator_state_generating_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
        virtual void on_input ( _logic_application_fsm_state_environment_type & ) ;
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_text_generator_state_finished_type
    : public _logic_application_fsm_state_type
    {
    } ;

    //
    // title_generator
    //

    class _machine_title_generator_state_initial_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_title_generator_state_generating_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
        virtual void on_input ( _logic_application_fsm_state_environment_type & ) ;
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_title_generator_state_finished_type
    : public _logic_application_fsm_state_type
    {
    } ;

    //
    // title_performer
    //

    class _machine_title_performer_state_initial_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_title_performer_state_performing_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual void on_input ( _logic_application_fsm_state_environment_type & ) ;
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_title_performer_state_finished_type
    : public _logic_application_fsm_state_type
    {
    } ;

    //
    // main_menu_generator
    //

    class _machine_main_menu_generator_state_initial_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_main_menu_generator_state_generating_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
        virtual void on_input ( _logic_application_fsm_state_environment_type & ) ;
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_main_menu_generator_state_finished_type
    : public _logic_application_fsm_state_type
    {
    } ;

    //
    // main_menu_performer
    //

    class _machine_main_menu_performer_state_initial_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_main_menu_performer_state_performing_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
        virtual void on_input ( _logic_application_fsm_state_environment_type & ) ;
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_main_menu_performer_state_finished_type
    : public _logic_application_fsm_state_type
    {
    } ;

    //
    // amusement_generator
    //

    class _machine_amusement_generator_state_initial_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_amusement_generator_state_generating_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
        virtual void on_input ( _logic_application_fsm_state_environment_type & ) ;
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_amusement_generator_state_finished_type
    : public _logic_application_fsm_state_type
    {
    } ;

    //
    // amusement_performer
    //

    class _machine_amusement_performer_state_initial_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_amusement_performer_state_performing_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
        virtual void on_input ( _logic_application_fsm_state_environment_type & ) ;
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_amusement_performer_state_finished_type
    : public _logic_application_fsm_state_type
    {
    } ;

    //
    // game_performer
    //

    class _machine_game_performer_state_initial_type
    : public _logic_application_fsm_state_type
    {
    public :
        virtual _logic_application_fsm_state_type & transition ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    class _machine_game_performer_state_performing_type
    : public _logic_application_fsm_state_type
    {
        virtual void on_entry ( _logic_application_fsm_state_environment_type & ) ;
        virtual void on_input ( _logic_application_fsm_state_environment_type & ) ;
    } ;

    //
    // all states
    //

    class _logic_application_fsm_states_type
    {
    public :
        _machine_amusement_generator_state_finished_type amusement_generator_state_finished ;
        _machine_amusement_generator_state_generating_type amusement_generator_state_generating ;
        _machine_amusement_generator_state_initial_type amusement_generator_state_initial ;
        _machine_amusement_performer_state_finished_type amusement_performer_state_finished ;
        _machine_amusement_performer_state_initial_type amusement_performer_state_initial ;
        _machine_amusement_performer_state_performing_type amusement_performer_state_performing ;
        _machine_game_performer_state_initial_type game_performer_state_initial ;
        _machine_game_performer_state_performing_type game_performer_state_performing ;
        _machine_generator_state_amusement_type generator_state_amusement ;
        _machine_generator_state_game_type generator_state_game ;
        _machine_generator_state_initial_type generator_state_initial ;
        _machine_generator_state_main_menu_type generator_state_main_menu ;
        _machine_generator_state_text_type generator_state_text ;
        _machine_generator_state_title_type generator_state_title ;
        _machine_main_menu_generator_state_finished_type main_menu_generator_state_finished ;
        _machine_main_menu_generator_state_generating_type main_menu_generator_state_generating ;
        _machine_main_menu_generator_state_initial_type main_menu_generator_state_initial ;
        _machine_main_menu_performer_state_finished_type main_menu_performer_state_finished ;
        _machine_main_menu_performer_state_initial_type main_menu_performer_state_initial ;
        _machine_main_menu_performer_state_performing_type main_menu_performer_state_performing ;
        _machine_performer_state_amusement_type performer_state_amusement ;
        _machine_performer_state_game_type performer_state_game ;
        _machine_performer_state_initial_type performer_state_initial ;
        _machine_performer_state_main_menu_type performer_state_main_menu ;
        _machine_performer_state_title_type performer_state_title ;
        _machine_text_generator_state_finished_type text_generator_state_finished ;
        _machine_text_generator_state_generating_type text_generator_state_generating ;
        _machine_text_generator_state_initial_type text_generator_state_initial ;
        _machine_title_generator_state_finished_type title_generator_state_finished ;
        _machine_title_generator_state_generating_type title_generator_state_generating ;
        _machine_title_generator_state_initial_type title_generator_state_initial ;
        _machine_title_performer_state_finished_type title_performer_state_finished ;
        _machine_title_performer_state_initial_type title_performer_state_initial ;
        _machine_title_performer_state_performing_type title_performer_state_performing ;
    } ;

public :
    shy_logic_application_fsm_autogenerated ( ) ;
    void set_inputs ( typename platform_pointer :: template pointer < logic_application_fsm_inputs_type > ) ;
    void set_actions ( typename platform_pointer :: template pointer < logic_application_fsm_actions_type > ) ;
    void is_fsm_running ( num_whole & ) ;
    void run_fsm_begin ( ) ;
    void run_fsm_end ( ) ;
    void reset_autogenerated_input_events ( ) ;
    void recalc_current_autogenerated_inputs ( ) ;
    void determine_autogenerated_inputs_change ( num_whole & ) ;
    void update_fixed_autogenerated_inputs ( ) ;
    void tick_all_fsms ( ) ;

private :
    typename platform_pointer :: template pointer < _logic_application_fsm_state_type > _machine_amusement_generator_state ;
    typename platform_pointer :: template pointer < _logic_application_fsm_state_type > _machine_amusement_performer_state ;
    typename platform_pointer :: template pointer < _logic_application_fsm_state_type > _machine_game_performer_state ;
    typename platform_pointer :: template pointer < _logic_application_fsm_state_type > _machine_generator_state ;
    typename platform_pointer :: template pointer < _logic_application_fsm_state_type > _machine_main_menu_generator_state ;
    typename platform_pointer :: template pointer < _logic_application_fsm_state_type > _machine_main_menu_performer_state ;
    typename platform_pointer :: template pointer < _logic_application_fsm_state_type > _machine_performer_state ;
    typename platform_pointer :: template pointer < _logic_application_fsm_state_type > _machine_text_generator_state ;
    typename platform_pointer :: template pointer < _logic_application_fsm_state_type > _machine_title_generator_state ;
    typename platform_pointer :: template pointer < _logic_application_fsm_state_type > _machine_title_performer_state ;

    num_whole _fsm_running ;
    _logic_application_fsm_autogenerated_actions_type _logic_application_fsm_autogenerated_actions ;
    _logic_application_fsm_states_type _logic_application_fsm_states ;
    _logic_application_fsm_state_environment_type _logic_application_fsm_state_environment ;
    _logic_application_fsm_autogenerated_inputs_type _current_autogenerated_inputs ;
    _logic_application_fsm_autogenerated_inputs_type _fixed_autogenerated_inputs ;
} ;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_performer_state_initial_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    return env . states . get ( ) . performer_state_title ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_performer_state_title_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . autogenerated_actions . get ( ) . title_performer_command_start ( ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_performer_state_title_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_title_performer_state_is_finished ) )
        return env . states . get ( ) . performer_state_main_menu ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_performer_state_main_menu_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . autogenerated_actions . get ( ) . main_menu_performer_command_start ( ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_performer_state_main_menu_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_main_menu_performer_state_is_finished ) )
        return env . states . get ( ) . performer_state_amusement ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_performer_state_amusement_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . autogenerated_actions . get ( ) . amusement_performer_command_start ( ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_performer_state_amusement_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_amusement_performer_state_is_finished ) )
        return env . states . get ( ) . performer_state_game ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_performer_state_game_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . autogenerated_actions . get ( ) . game_performer_command_start ( ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_generator_state_initial_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    return env . states . get ( ) . generator_state_text ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_generator_state_text_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . autogenerated_actions . get ( ) . text_generator_command_start ( ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_generator_state_text_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_text_generator_state_is_finished ) )
        return env . states . get ( ) . generator_state_title ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_generator_state_title_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . autogenerated_actions . get ( ) . title_generator_command_start ( ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_generator_state_title_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_title_generator_state_is_finished ) )
        return env . states . get ( ) . generator_state_main_menu ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_generator_state_main_menu_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . autogenerated_actions . get ( ) . main_menu_generator_command_start ( ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_generator_state_main_menu_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_main_menu_generator_state_is_finished ) )
        return env . states . get ( ) . generator_state_amusement ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_generator_state_amusement_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . autogenerated_actions . get ( ) . amusement_generator_command_start ( ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_generator_state_amusement_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_amusement_generator_state_is_finished ) )
        return env . states . get ( ) . generator_state_game ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_text_generator_state_initial_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_text_generator_command_start ) )
        return env . states . get ( ) . text_generator_state_generating ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_text_generator_state_generating_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . actions . get ( ) . logic_text_prepare_permit ( ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_text_generator_state_generating_type :: on_input ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_update ) )
        env . actions . get ( ) . logic_text_update ( ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_text_generator_state_generating_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_text_prepared ) )
        return env . states . get ( ) . text_generator_state_finished ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_title_generator_state_initial_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_title_generator_command_start )
      && platform_conditions :: whole_is_true ( env . inputs . get ( ) . stage_title_enabled )
       )
    {
        return env . states . get ( ) . title_generator_state_generating ;
    }
    else if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_title_generator_command_start )
           && platform_conditions :: whole_is_true ( env . inputs . get ( ) . stage_title_disabled )
            )
    {
        return env . states . get ( ) . title_generator_state_finished ;
    }
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_title_generator_state_generating_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . actions . get ( ) . logic_title_launch_permit ( ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_title_generator_state_generating_type :: on_input ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_update ) )
        env . actions . get ( ) . logic_title_update ( ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_title_generator_state_generating_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_title_created ) )
        return env . states . get ( ) . title_generator_state_finished ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_title_performer_state_initial_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_title_performer_command_start )
      && platform_conditions :: whole_is_true ( env . inputs . get ( ) . stage_title_enabled )
       )
    {
        return env . states . get ( ) . title_performer_state_performing ;
    }
    else if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_title_performer_command_start )
           && platform_conditions :: whole_is_true ( env . inputs . get ( ) . stage_title_disabled )
            )
    {
        return env . states . get ( ) . title_performer_state_finished ;
    }
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_title_performer_state_performing_type :: on_input ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_render ) )
        env . actions . get ( ) . logic_title_render ( ) ;
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_update ) )
        env . actions . get ( ) . logic_title_update ( ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_title_performer_state_performing_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_title_finished ) )
        return env . states . get ( ) . title_performer_state_finished ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_main_menu_generator_state_initial_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_main_menu_generator_command_start )
      && platform_conditions :: whole_is_true ( env . inputs . get ( ) . stage_main_menu_enabled )
       )
    {
        return env . states . get ( ) . main_menu_generator_state_generating ;
    }
    else if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_main_menu_generator_command_start )
           && platform_conditions :: whole_is_true ( env . inputs . get ( ) . stage_main_menu_disabled )
            )
    {
        return env . states . get ( ) . main_menu_generator_state_finished ;
    }
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_main_menu_generator_state_generating_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . actions . get ( ) . logic_main_menu_creation_permit ( ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_main_menu_generator_state_generating_type :: on_input ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_update ) )
        env . actions . get ( ) . logic_main_menu_update ( ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_main_menu_generator_state_generating_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_main_menu_created ) )
        return env . states . get ( ) . main_menu_generator_state_finished ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_main_menu_performer_state_initial_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_main_menu_performer_command_start )
      && platform_conditions :: whole_is_true ( env . inputs . get ( ) . stage_main_menu_enabled )
       )
    {
        return env . states . get ( ) . main_menu_performer_state_performing ;
    }
    else if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_main_menu_performer_command_start )
           && platform_conditions :: whole_is_true ( env . inputs . get ( ) . stage_main_menu_disabled )
            )
    {
        return env . states . get ( ) . main_menu_performer_state_finished ;
    }
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_main_menu_performer_state_performing_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . actions . get ( ) . logic_main_menu_launch_permit ( ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_main_menu_performer_state_performing_type :: on_input ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_render ) )
        env . actions . get ( ) . logic_main_menu_render ( ) ;
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_update ) )
        env . actions . get ( ) . logic_main_menu_update ( ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_main_menu_performer_state_performing_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_main_menu_finished ) )
        return env . states . get ( ) . main_menu_performer_state_finished ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_amusement_generator_state_initial_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_amusement_generator_command_start ) 
      && platform_conditions :: whole_is_true ( env . inputs . get ( ) . stage_amusement_enabled )
       )
    {
        return env . states . get ( ) . amusement_generator_state_generating ;
    }
    else if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_amusement_generator_command_start ) 
           && platform_conditions :: whole_is_true ( env . inputs . get ( ) . stage_amusement_disabled )
            )
    {
        return env . states . get ( ) . amusement_generator_state_finished ;
    }
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_amusement_generator_state_generating_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . actions . get ( ) . logic_amusement_creation_permit ( ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_amusement_generator_state_generating_type :: on_input ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_update ) )
        env . actions . get ( ) . logic_amusement_update ( ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_amusement_generator_state_generating_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_amusement_created ) )
        return env . states . get ( ) . amusement_generator_state_finished ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_amusement_performer_state_initial_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_amusement_performer_command_start )
      && platform_conditions :: whole_is_true ( env . inputs . get ( ) . stage_amusement_enabled )
       )
    {
        return env . states . get ( ) . amusement_performer_state_performing ;
    }
    else if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_amusement_performer_command_start )
           && platform_conditions :: whole_is_true ( env . inputs . get ( ) . stage_amusement_disabled )
            )
    {
        return env . states . get ( ) . amusement_performer_state_finished ;
    }
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_amusement_performer_state_performing_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . actions . get ( ) . logic_amusement_launch_permit ( ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_amusement_performer_state_performing_type :: on_input ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_render ) )
        env . actions . get ( ) . logic_amusement_render ( ) ;
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_update ) )
        env . actions . get ( ) . logic_amusement_update ( ) ;
}

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_amusement_performer_state_performing_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_amusement_finished ) )
        return env . states . get ( ) . amusement_performer_state_finished ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename logic_application_fsm >
typename shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_state_type &
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_game_performer_state_initial_type :: transition ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . autogenerated_inputs . get ( ) . machine_game_performer_command_start ) )
        return env . states . get ( ) . game_performer_state_performing ;
    else
        return _logic_application_fsm_state_type :: transition ( env ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_game_performer_state_performing_type :: on_entry ( _logic_application_fsm_state_environment_type & env )
{
    env . actions . get ( ) . logic_game_launch_permit ( ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _machine_game_performer_state_performing_type :: on_input ( _logic_application_fsm_state_environment_type & env )
{
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_render ) )
        env . actions . get ( ) . logic_game_render ( ) ;
    if ( platform_conditions :: whole_is_true ( env . inputs . get ( ) . logic_application_update ) )
        env . actions . get ( ) . logic_game_update ( ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_autogenerated_actions_type :: set_fsm 
( typename platform_pointer :: template pointer < logic_application_fsm_autogenerated > arg_fsm )
{
    _fsm = arg_fsm ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_autogenerated_actions_type :: amusement_generator_command_start ( )
{
    platform_math :: make_num_whole ( _fsm . get ( ) . _current_autogenerated_inputs . machine_amusement_generator_command_start , true ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_autogenerated_actions_type :: amusement_performer_command_start ( )
{
    platform_math :: make_num_whole ( _fsm . get ( ) . _current_autogenerated_inputs . machine_amusement_performer_command_start , true ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_autogenerated_actions_type :: game_performer_command_start ( )
{
    platform_math :: make_num_whole ( _fsm . get ( ) . _current_autogenerated_inputs . machine_game_performer_command_start , true ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_autogenerated_actions_type :: main_menu_generator_command_start ( )
{
    platform_math :: make_num_whole ( _fsm . get ( ) . _current_autogenerated_inputs . machine_main_menu_generator_command_start , true ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_autogenerated_actions_type :: main_menu_performer_command_start ( )
{
    platform_math :: make_num_whole ( _fsm . get ( ) . _current_autogenerated_inputs . machine_main_menu_performer_command_start , true ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_autogenerated_actions_type :: text_generator_command_start ( )
{
    platform_math :: make_num_whole ( _fsm . get ( ) . _current_autogenerated_inputs . machine_text_generator_command_start , true ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_autogenerated_actions_type :: title_generator_command_start ( )
{
    platform_math :: make_num_whole ( _fsm . get ( ) . _current_autogenerated_inputs . machine_title_generator_command_start , true ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: _logic_application_fsm_autogenerated_actions_type :: title_performer_command_start ( )
{
    platform_math :: make_num_whole ( _fsm . get ( ) . _current_autogenerated_inputs . machine_title_performer_command_start , true ) ;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template < typename logic_application_fsm >
shy_logic_application_fsm_autogenerated < logic_application_fsm > :: shy_logic_application_fsm_autogenerated ( )
{
    typename platform_pointer :: template pointer < logic_application_fsm_autogenerated > fsm ;
    platform_pointer :: bind ( fsm , * this ) ;
    _logic_application_fsm_autogenerated_actions . set_fsm ( fsm ) ;

    platform_pointer :: bind ( _logic_application_fsm_state_environment . autogenerated_actions , _logic_application_fsm_autogenerated_actions ) ;
    platform_pointer :: bind ( _logic_application_fsm_state_environment . autogenerated_inputs , _fixed_autogenerated_inputs ) ;
    platform_pointer :: bind ( _logic_application_fsm_state_environment . states , _logic_application_fsm_states ) ;

    platform_pointer :: bind ( _machine_amusement_generator_state , _logic_application_fsm_states . amusement_generator_state_initial ) ;
    platform_pointer :: bind ( _machine_amusement_performer_state , _logic_application_fsm_states . amusement_performer_state_initial ) ;
    platform_pointer :: bind ( _machine_game_performer_state , _logic_application_fsm_states . game_performer_state_initial ) ;
    platform_pointer :: bind ( _machine_generator_state , _logic_application_fsm_states . generator_state_initial ) ;
    platform_pointer :: bind ( _machine_main_menu_generator_state , _logic_application_fsm_states . main_menu_generator_state_initial ) ;
    platform_pointer :: bind ( _machine_main_menu_performer_state , _logic_application_fsm_states . main_menu_performer_state_initial ) ;
    platform_pointer :: bind ( _machine_performer_state , _logic_application_fsm_states . performer_state_initial ) ;
    platform_pointer :: bind ( _machine_text_generator_state , _logic_application_fsm_states . text_generator_state_initial ) ;
    platform_pointer :: bind ( _machine_title_generator_state , _logic_application_fsm_states . title_generator_state_initial ) ;
    platform_pointer :: bind ( _machine_title_performer_state , _logic_application_fsm_states . title_performer_state_initial ) ;

    platform_math :: make_num_whole ( _fsm_running , false ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: set_actions ( typename platform_pointer :: template pointer < logic_application_fsm_actions_type > actions )
{
    _logic_application_fsm_state_environment . actions = actions ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: set_inputs ( typename platform_pointer :: template pointer < logic_application_fsm_inputs_type > inputs )
{
    _logic_application_fsm_state_environment . inputs = inputs ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: reset_autogenerated_input_events ( )
{
    platform_math :: make_num_whole ( _current_autogenerated_inputs . machine_amusement_generator_command_start , false ) ;
    platform_math :: make_num_whole ( _current_autogenerated_inputs . machine_amusement_performer_command_start , false ) ;
    platform_math :: make_num_whole ( _current_autogenerated_inputs . machine_game_performer_command_start , false ) ;
    platform_math :: make_num_whole ( _current_autogenerated_inputs . machine_main_menu_generator_command_start , false ) ;
    platform_math :: make_num_whole ( _current_autogenerated_inputs . machine_main_menu_performer_command_start , false ) ;
    platform_math :: make_num_whole ( _current_autogenerated_inputs . machine_text_generator_command_start , false ) ;
    platform_math :: make_num_whole ( _current_autogenerated_inputs . machine_title_generator_command_start , false ) ;
    platform_math :: make_num_whole ( _current_autogenerated_inputs . machine_title_performer_command_start , false ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: determine_autogenerated_inputs_change ( num_whole & inputs_changed )
{
    if ( platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_amusement_generator_command_start , _fixed_autogenerated_inputs . machine_amusement_generator_command_start )
      && platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_amusement_generator_state_is_finished , _fixed_autogenerated_inputs . machine_amusement_generator_state_is_finished )
      && platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_amusement_performer_command_start , _fixed_autogenerated_inputs . machine_amusement_performer_command_start )
      && platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_amusement_performer_state_is_finished , _fixed_autogenerated_inputs . machine_amusement_performer_state_is_finished )
      && platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_game_performer_command_start , _fixed_autogenerated_inputs . machine_game_performer_command_start )
      && platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_main_menu_generator_command_start , _fixed_autogenerated_inputs . machine_main_menu_generator_command_start )
      && platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_main_menu_generator_state_is_finished , _fixed_autogenerated_inputs . machine_main_menu_generator_state_is_finished )
      && platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_main_menu_performer_command_start , _fixed_autogenerated_inputs . machine_main_menu_performer_command_start )
      && platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_main_menu_performer_state_is_finished , _fixed_autogenerated_inputs . machine_main_menu_performer_state_is_finished )
      && platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_text_generator_command_start , _fixed_autogenerated_inputs . machine_text_generator_command_start )
      && platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_text_generator_state_is_finished , _fixed_autogenerated_inputs . machine_text_generator_state_is_finished )
      && platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_title_generator_command_start , _fixed_autogenerated_inputs . machine_title_generator_command_start )
      && platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_title_generator_state_is_finished , _fixed_autogenerated_inputs . machine_title_generator_state_is_finished )
      && platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_title_performer_command_start , _fixed_autogenerated_inputs . machine_title_performer_command_start )
      && platform_conditions :: wholes_are_equal ( _current_autogenerated_inputs . machine_title_performer_state_is_finished , _fixed_autogenerated_inputs . machine_title_performer_state_is_finished )
       )
    {
        platform_math :: make_num_whole ( inputs_changed , false ) ;
    }
    else
        platform_math :: make_num_whole ( inputs_changed , true ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: recalc_current_autogenerated_inputs ( )
{
    platform_pointer :: is_bound_to ( _current_autogenerated_inputs . machine_amusement_generator_state_is_finished , _machine_amusement_generator_state , _logic_application_fsm_states . amusement_generator_state_finished ) ;
    platform_pointer :: is_bound_to ( _current_autogenerated_inputs . machine_amusement_performer_state_is_finished , _machine_amusement_performer_state , _logic_application_fsm_states . amusement_performer_state_finished ) ;
    platform_pointer :: is_bound_to ( _current_autogenerated_inputs . machine_main_menu_generator_state_is_finished , _machine_main_menu_generator_state , _logic_application_fsm_states . main_menu_generator_state_finished ) ;
    platform_pointer :: is_bound_to ( _current_autogenerated_inputs . machine_main_menu_performer_state_is_finished , _machine_main_menu_performer_state , _logic_application_fsm_states . main_menu_performer_state_finished ) ;
    platform_pointer :: is_bound_to ( _current_autogenerated_inputs . machine_text_generator_state_is_finished , _machine_text_generator_state , _logic_application_fsm_states . text_generator_state_finished ) ;
    platform_pointer :: is_bound_to ( _current_autogenerated_inputs . machine_title_generator_state_is_finished , _machine_title_generator_state , _logic_application_fsm_states . title_generator_state_finished ) ;
    platform_pointer :: is_bound_to ( _current_autogenerated_inputs . machine_title_performer_state_is_finished , _machine_title_performer_state , _logic_application_fsm_states . title_performer_state_finished ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: update_fixed_autogenerated_inputs ( )
{
    _fixed_autogenerated_inputs = _current_autogenerated_inputs ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: tick_all_fsms ( )
{
    engine_fsm :: tick_single_fsm ( _logic_application_fsm_state_environment , _machine_amusement_generator_state ) ;
    engine_fsm :: tick_single_fsm ( _logic_application_fsm_state_environment , _machine_amusement_performer_state ) ;
    engine_fsm :: tick_single_fsm ( _logic_application_fsm_state_environment , _machine_game_performer_state ) ;
    engine_fsm :: tick_single_fsm ( _logic_application_fsm_state_environment , _machine_generator_state ) ;
    engine_fsm :: tick_single_fsm ( _logic_application_fsm_state_environment , _machine_main_menu_generator_state ) ;
    engine_fsm :: tick_single_fsm ( _logic_application_fsm_state_environment , _machine_main_menu_performer_state ) ;
    engine_fsm :: tick_single_fsm ( _logic_application_fsm_state_environment , _machine_performer_state ) ;
    engine_fsm :: tick_single_fsm ( _logic_application_fsm_state_environment , _machine_text_generator_state ) ;
    engine_fsm :: tick_single_fsm ( _logic_application_fsm_state_environment , _machine_title_generator_state ) ;
    engine_fsm :: tick_single_fsm ( _logic_application_fsm_state_environment , _machine_title_performer_state ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: is_fsm_running ( num_whole & result )
{
    result = _fsm_running ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: run_fsm_begin ( )
{
    platform_math :: make_num_whole ( _fsm_running , true ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: run_fsm_end ( )
{
    platform_math :: make_num_whole ( _fsm_running , false ) ;
}

