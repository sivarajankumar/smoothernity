template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: tick_all_fsms ( )
{
    engine_fsm :: tick_single_fsm ( _state_environment , _machine_amusement_generator_state ) ;
    engine_fsm :: tick_single_fsm ( _state_environment , _machine_amusement_performer_state ) ;
    engine_fsm :: tick_single_fsm ( _state_environment , _machine_game_performer_state ) ;
    engine_fsm :: tick_single_fsm ( _state_environment , _machine_generator_state ) ;
    engine_fsm :: tick_single_fsm ( _state_environment , _machine_main_menu_generator_state ) ;
    engine_fsm :: tick_single_fsm ( _state_environment , _machine_main_menu_performer_state ) ;
    engine_fsm :: tick_single_fsm ( _state_environment , _machine_performer_state ) ;
    engine_fsm :: tick_single_fsm ( _state_environment , _machine_text_generator_state ) ;
    engine_fsm :: tick_single_fsm ( _state_environment , _machine_title_generator_state ) ;
    engine_fsm :: tick_single_fsm ( _state_environment , _machine_title_performer_state ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: is_fsm_running ( num_whole & result )
{
    result = _fsm_running ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: run_fsm_begin ( )
{
    platform_math :: make_num_whole ( _fsm_running , true ) ;
}

template < typename logic_application_fsm >
void shy_logic_application_fsm_autogenerated < logic_application_fsm > :: run_fsm_end ( )
{
    platform_math :: make_num_whole ( _fsm_running , false ) ;
}

